<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<!-- Properties panel -->

	<binding id="customerSection">
		<content>
			<xul:hbox align="center">
				<xul:clabel value="${transui:m.order.bo.general.Email,ucf,attr}" />
				<xul:label xbl:inherits="value=email" />
				<xul:toolbarbutton label="${transui:m.order.bo.doceditor.panel.properties.View-customer,ucf,attr}" image="{IconsBase}/small/customer.png"
					oncommand="showCustomer()" />
				<xul:spacer flex="1" />
			</xul:hbox>
		</content>
		<implementation>
			<method name="showCustomer">
				<body><![CDATA[
					var id = this.getAttribute('customerId');
					var uri = ['customer', 'openDocument', 'modules_customer_customer', id].join(',');
					var pnode = this.parentNode;
					while(!pnode.hasAttribute('documentid')) {pnode = pnode.parentNode;}
					var orderId = pnode.getAttribute('documentid')
					var from = ['order', 'openDocument', 'modules_order_order', orderId, 'properties'].join(',');
					openActionUri(uri, from);
				]]></body>
			</method>
		</implementation>
	</binding>

	<binding id="cOrderLines" extends="widgets.cGrid#cAbstractSortableGrid">
		<implementation>
			<constructor><![CDATA[
				this.fireEvent('gridInitialised');
			]]></constructor>
		</implementation>
		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled">
				<xul:columns>
					<xul:column flex="1" />
					<xul:column flex="5" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
				</xul:columns>
				<xul:rows anonid="document-rows">
					<xul:row class="head" anonid="head-row">
						<xul:label name="codeReference" value="${transui:m.order.frontoffice.codereference,ucf,attr}" sortonfield="true" />
						<xul:label name="productLabel" value="${transui:m.order.frontoffice.designation,ucf,attr}" sortonfield="true" />
						<xul:label name="unitPriceWithTax" value="${transui:m.customer.bo.doceditor.panel.carts.unit-price,ucf,attr}" sortonfield="true" />
						<xul:label name="quantity" value="${transui:m.order.frontoffice.quantity,ucf,attr}" sortonfield="true" />
						<xul:label name="totalPriceWithTax" value="${transui:m.customer.bo.doceditor.panel.carts.total-price,ucf,attr}" sortonfield="true" />
					</xul:row>
				</xul:rows>
			</xul:grid>
			<xul:row anonid="template-row" class="document" hidden="true">
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
			</xul:row>
		</content>
	</binding>

	<binding id="cDiscountLines" extends="widgets.cGrid#cAbstractSortableGrid">
		<implementation>
			<constructor><![CDATA[
				this.fireEvent('gridInitialised');
			]]></constructor>
		</implementation>
		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled">
				<xul:columns>
					<xul:column flex="5" />
					<xul:column flex="1" />
					<xul:column flex="1" />
				</xul:columns>
				<xul:rows anonid="document-rows">
					<xul:row class="head" anonid="head-row">
						<xul:label name="label" value="Label" sortonfield="true" />
						<xul:label name="valueWithoutTax" value="Montant HT" />
						<xul:label name="valueWithTax" value="Montant TTC" />
					</xul:row>
				</xul:rows>
			</xul:grid>
			<xul:row anonid="template-row" class="document" hidden="true">
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
			</xul:row>
		</content>
	</binding>

	<binding id="cCustomerAddress" extends="layout.cDocumentEditor#cFieldsGroup">
		<implementation>
			<field name="mLabelNames">["label", "line1","line2","line3","zipAndCity","province","country","phone","fax"]</field>

			<method name="fireEvent">
				<parameter name="name" />
				<body><![CDATA[
					var evt = document.createEvent("Event");
					evt.initEvent(name, true, true);
					this.dispatchEvent(evt);
				]]></body>
			</method>

			<constructor><![CDATA[
				this.fireEvent('addressInitialised');
			]]></constructor>

			<method name="initJSONDataset">
				<parameter name="dataset" />
				<body><![CDATA[
					if (!dataset) {dataset = {};}
					for each (var name in this.mLabelNames)
					{
						var ctrl = document.getAnonymousElementByAttribute(this, "anonid", name);
						if (name in dataset)
						{
							ctrl.setAttribute('value', dataset[name]);
						}
						else
						{
							ctrl.setAttribute('value', '');
						}
					}
				]]></body>
			</method>
		</implementation>

		<content>
			<xul:groupbox flex="1">
				<xul:caption xbl:inherits="label" />
				<xul:grid flex="1">
					<xul:columns>
						<xul:column />
						<xul:column flex="1" />
					</xul:columns>
					<xul:rows>
						<xul:row>
							<xul:label style="padding-left: 21px" />
							<xul:cselectablelabel anonid="label" />
						</xul:row>
						<xul:row>
							<xul:label style="padding-left: 21px" />
							<xul:cselectablelabel anonid="line1" />
						</xul:row>
						<xul:row>
							<xul:label style="padding-left: 21px" />
							<xul:cselectablelabel anonid="line2" />
						</xul:row>
						<xul:row>
							<xul:label style="padding-left: 21px" />
							<xul:cselectablelabel anonid="line3" />
						</xul:row>
						<xul:row>
							<xul:label style="padding-left: 21px" />
							<xul:cselectablelabel anonid="zipAndCity" />
						</xul:row>
						<xul:row>
							<xul:label style="padding-left: 21px" />
							<xul:cselectablelabel anonid="province" />
						</xul:row>
						<xul:row>
							<xul:label style="padding-left: 21px" />
							<xul:cselectablelabel anonid="country" />
						</xul:row>
						<xul:row>
							<xul:label style="padding-left: 21px" />
							<xul:cselectablelabel anonid="phone" />
						</xul:row>
						<xul:row>
							<xul:label style="padding-left: 21px" />
							<xul:cselectablelabel anonid="fax" />
						</xul:row>
					</xul:rows>
				</xul:grid>
				<children />
			</xul:groupbox>
		</content>
	</binding>

	<!-- Messages panel -->

	<binding id="messageSection">
		<resources>
			<stylesheet src="modules.order.cOrderEditor" />
		</resources>
		<content>
			<xul:groupbox flex="1">
				<xul:caption xbl:inherits="label" />
				<xul:grid flex="1">
					<xul:columns>
						<xul:column />
						<xul:column flex="1" />
					</xul:columns>
					<xul:rows>
						<xul:row>
							<xul:label value="${transui:m.order.document.message.Creationdate,ucf,attr}" />
							<xul:label class="allow-text-selection" xbl:inherits="xbl:text=date" />
						</xul:row>
						<xul:row>
							<xul:label value="${transui:m.order.document.message.Content,ucf,attr}" />
							<xul:hbox flex="1">
								<html:div flex="1" anonid="content" class="allow-text-selection">
									<xbl:children />
								</html:div>
							</xul:hbox>
						</xul:row>
					</xul:rows>
				</xul:grid>
			</xul:groupbox>
		</content>
	</binding>
	
	<!-- Bills and shipping. -->
	<binding id="cBillgenerator" extends="form.cField#cHiddenField">
		<content>
			<children />
			<xul:vbox>
				<xul:hbox>
					<xul:button xbl:inherits="hidden=hide-generate,disabled=disable-generate" label="${transui:m.order.bo.actions.GenerateBill,ucf,attr}"
						oncommand="generate()" image="{IconsBase}/small/document-text.png" />
					<xul:button xbl:inherits="hidden=hide-dl" hidden="true" label="${transui:m.order.bo.actions.DownloadBill,ucf,attr}"
						oncommand="download()" image="{IconsBase}/small/download.png" />
					<xul:label xbl:inherits="hidden=hide-msg" value="${transui:m.order.bo.actions.CannotGenerateBillMsg,ucf,attr}" />
				</xul:hbox>
			</xul:vbox>
		</content>
		<implementation>
			<field name="tmpBillUrl"></field>
			<method name="setInitialValue">
				<parameter name="val" />
				<body><![CDATA[
					var fval = this.fixString(val);
					if (fval == "-1")
					{
						this.setAttribute('hide-generate', 'true');
						this.setAttribute('hide-dl', 'true');
						this.removeAttribute('hide-msg');
					}
					else if (fval == "-2")
					{
						this.setAttribute('hide-generate', 'true');
						this.setAttribute('hide-dl', 'true');
						this.setAttribute('hide-msg', 'true');
					}
					else if (fval != "")
					{
						this.setAttribute('hide-generate', 'true');
						this.setAttribute('hide-msg', 'true');
						this.removeAttribute('hide-dl');
					}
					else
					{
						this.setAttribute('hide-dl', 'true');
						this.setAttribute('hide-msg', 'true');
						this.removeAttribute('hide-generate');
					}
					this.setAttribute("initialvalue", fval);
					this.setAttribute("value", fval);
				]]></body>
			</method>
			<method name="generate">
				<body><![CDATA[
					var propspanel = this.parentNode;
					while (propspanel && propspanel.tagName != "cpropertiespanel")
					{
						wCore.debug(propspanel.localName);
						propspanel = propspanel.parentNode;
					}
					var edt = propspanel.documentEditor;
					this.setAttribute("disable-generate", true);
					try
					{
						propspanel.showTextMessage("${transui:m.order.bo.actions.GeneratingBill,ucf,js}");
						var result = wCore.executeJSON("order", "GenerateBill", {cmpref: edt.documentid, lang: edt.mDocumentInfos.vo}, null , true); 	
						if (result.status === 'OK')
						{
							propspanel.showTextMessage("${transui:m.order.bo.actions.GeneratingBillDone,ucf,js}");
							this.tmpBillUrl = result.contents.url;
							this.setAttribute('hide-generate', true);
							this.removeAttribute('hide-dl');
							
						}
						else
						{
							propspanel.showErrorMessage(result.contents.errorMessage);
						}
					}
					catch (e)
					{
						wCore.error('onGenerateBill', [], e);
					}
					this.removeAttribute("disable-generate", true);
				]]></body>
			</method>
			<method name="download">
				<body><![CDATA[
					if (this.value != "")
					{
						wToolkit.downloadurl(this.value);
					}
					else if (this.tmpBillUrl != "")
					{
						wToolkit.downloadurl(this.tmpBillUrl)
					}
				]]></body>
			</method>
		</implementation>
	</binding>

	<binding id="cBillsSoratbleGrid" extends="widgets.cGrid#cAbstractSortableGrid">
		<implementation>
			<constructor><![CDATA[
				this.fireEvent('gridInitialised');
			]]></constructor>

			<method name="execute_edit">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					if (this.disabled) {return;}
					var uri = ['order', 'openDocument', rowData.type, rowData.id].join(',');
					openActionUri(uri);
				]]></body>
			</method>

			<method name="execute_validate">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					if (this.disabled) {return;}
					var me = this;
					var node = rowNode;
					var data = rowData;
					var callBack = function() {me.onValidate(node, data);}
					getController().openModalDialog(this, 'ValidateBill', {callBack: callBack, rowData: rowData});
				]]></body>
			</method>

			<method name="onValidate">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					this.setCellValue(rowNode.childNodes[2], 'status', rowNode.mDataRow);
					this.setCellArchiveValue(rowNode.childNodes[3], rowNode.mDataRow);
					
					var module = this.parentNode;
					while (module && module.tagName != "wmodule")
					{
						module = module.parentNode;
					}
					module.refreshMainViewDeck();
				]]></body>
			</method>

			<method name="execute_generate">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					var propspanel = this.parentNode;
					var propspanel = this.parentNode;
					while (propspanel && propspanel.localName != "cfinancialpanel")
					{
						propspanel = propspanel.parentNode;
					}
					
					try
					{
						propspanel.showTextMessage("${transui:m.order.bo.actions.GeneratingBill,ucf,js}");
						var result = wCore.executeJSON("order", "GenerateBill", {cmpref: rowData.id, lang: rowData.lang}, null , true); 
						if (result.status === 'OK')
						{
							propspanel.showTextMessage("${transui:m.order.bo.actions.GeneratingBillDone,ucf,js}");
							rowNode.mDataRow.archive = result.contents.url;
							this.setCellArchiveValue(rowNode.childNodes[4], rowNode.mDataRow);
						}
						else
						{
							propspanel.showErrorMessage(result.contents.errorMessage);
						}
					}
					catch (e)
					{
						wCore.error('execute_generate', [rowNode, rowData], e);
					}
				]]></body>
			</method>

			<method name="execute_download">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					if (this.disabled) {return;}
					wToolkit.downloadurl(rowData.archive);
				]]></body>
			</method>

			<method name="setCellValue">
				<parameter name="cell" />
				<parameter name="name" />
				<parameter name="dataRow" />
				<body><![CDATA[	
					if (name === 'archive')
					{
						this.setCellArchiveValue(cell, dataRow);
					}
					else
					{
						cell.setAttribute('value', dataRow[name]);
						if (name === 'status')
						{
							if (dataRow.st == 'waiting')
							{
								cell.setAttribute('class', 'text-link');
								cell.setAttribute('action', 'validate');
							}
							else
							{
								cell.removeAttribute('class');
								cell.removeAttribute('action');
							}
						}
					}
				]]></body>
			</method>

			<method name="setCellArchiveValue">
				<parameter name="cell" />
				<parameter name="dataRow" />
				<body><![CDATA[
					if (dataRow.archive == "-1")
					{
						cell.setAttribute('value', "${transui:m.order.bo.actions.cannotgeneratebillmsg,ucf,js}");
					}
					else if (dataRow.archive == "-2")
					{
						cell.setAttribute('value', "-");
					}
					else if (dataRow.archive == "-3")
					{
						cell.setAttribute('value', "${transui:m.order.bo.actions.cannotgeneratebillmsg-temporary-number,ucf,js}");
					}
					else if (dataRow.archive == "")
					{
						cell.setAttribute('value', "${transui:m.order.bo.actions.generatebill,ucf,js}");
						cell.setAttribute('class', 'text-link');
						cell.setAttribute('action', 'generate');
					}
					else
					{
						cell.setAttribute('value', "${transui:m.order.bo.actions.downloadbill,ucf,js}");
						cell.setAttribute('class', 'text-link');
						cell.setAttribute('action', 'download');
					}
				]]></body>
			</method>
		</implementation>
		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled">
				<xul:columns>
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column />
				</xul:columns>
				<xul:rows anonid="document-rows">
					<xul:row class="head" anonid="head-row">
						<xul:label name="label" value="${transui:m.order.document.bill.Label,ucf,attr}" />
						<xul:label name="amount" value="${transui:m.order.document.bill.Amount,ucf,attr}" />
						<xul:label name="trsid" value="${transui:m.order.document.bill.TransactionId,ucf,attr}" />
						<xul:label name="status" value="${transui:m.order.document.bill.Status,ucf,attr}" />
						<xul:label name="archive" value="${transui:m.order.document.bill.Archive,ucf,attr}" />
						<xul:label name="actionrow" value="${transui:m.order.bo.doceditor.Actions,ucf,attr}" />
					</xul:row>
				</xul:rows>
			</xul:grid>
			<xul:row anonid="template-row" class="document" hidden="true">
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:toolbar class="actions">
					<xul:toolbarbutton action="edit" image="{IconsBase}/small/edit.png" tooltiptext="${transui:m.uixul.bo.actions.Edit,ucf,attr}" />
				</xul:toolbar>
			</xul:row>
		</content>
	</binding>

	<binding id="cExpeditionsSoratbleGrid" extends="widgets.cGrid#cAbstractSortableGrid">
		<implementation>
			<constructor><![CDATA[
				this.fireEvent('gridInitialised');
			]]></constructor>

			<method name="execute_edit">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					if (this.disabled) {return;}
					var uri = ['order', 'openDocument', rowData.type, rowData.id, 'properties'].join(',');
					openActionUri(uri);
				]]></body>
			</method>

			<method name="execute_shipped">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					if (this.disabled) {return;}
					var me = this;
					var node = rowNode;
					var data = rowData;
					var callBack = function() {me.onShipped(node, data);}
					getController().openModalDialog(this, 'ShipExpedition', {callBack: callBack, rowData: rowData});
				]]></body>
			</method>

			<method name="execute_tracking">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					if (this.disabled) {return;}
					wToolkit.openurl(rowData.trackingurl);
				]]></body>
			</method>

			<method name="onShipped">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					this.setCellValue(rowNode.childNodes[1], 'status', rowNode.mDataRow);
					this.setCellValue(rowNode.childNodes[3], 'traking', rowNode.mDataRow);
					
					var module = this.parentNode;
					while (module && module.tagName != "wmodule")
					{
						module = module.parentNode;
					}
					module.refreshMainViewDeck();
				]]></body>
			</method>

			<method name="setCellValue">
				<parameter name="cell" />
				<parameter name="name" />
				<parameter name="dataRow" />
				<body><![CDATA[	
					cell.setAttribute('value', dataRow[name]);
					if (name === 'status')
					{
						if (dataRow.st == 'prepare' && (dataRow.packetnumber == null || dataRow.packetnumber.length == 0))
						{
							cell.setAttribute('class', 'text-link');
							cell.setAttribute('action', 'shipped');
						}
						else
						{
							cell.removeAttribute('class');
							cell.removeAttribute('action');
						}
					}
					else if (name === 'trackingnumber')
					{
						if (dataRow.trackingurl)
						{
							cell.setAttribute('class', 'text-link');
							cell.setAttribute('action', 'tracking');
						}
						else
						{
							cell.removeAttribute('class');
							cell.removeAttribute('action');
						}
					}
				]]></body>
			</method>
		</implementation>
		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled">
				<xul:columns>
					<xul:column />
					<xul:column />
					<xul:column />
					<xul:column />
					<xul:column flex="1" />
					<xul:column />
				</xul:columns>
				<xul:rows anonid="document-rows">
					<xul:row class="head" anonid="head-row">
						<xul:label name="label" value="${transui:m.order.document.expedition.label,ucf,attr}" />
						<xul:label name="status" value="${transui:m.order.document.expedition.trackingtext,ucf,attr}" />
						<xul:label name="transporteur" value="${transui:m.order.document.expedition.transporteur,ucf,attr}" />
						<xul:label name="packetnumber" value="${transui:m.order.document.expedition.packetnumber,ucf,attr}" />
						<xul:label name="trackingnumber" value="${transui:m.order.document.expedition.trackingnumber,ucf,attr}" />
						<xul:label name="actionrow" value="${transui:m.order.bo.doceditor.actions,ucf,attr}" />
					</xul:row>
				</xul:rows>
			</xul:grid>
			<xul:row anonid="template-row" class="document" hidden="true">
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:toolbar class="actions">
					<xul:toolbarbutton action="edit" image="{IconsBase}/small/edit.png" tooltiptext="${transui:m.uixul.bo.actions.Edit,ucf,attr}" />
				</xul:toolbar>
			</xul:row>
		</content>
	</binding>

	<binding id="validateBillDialog" extends="core.wDialog#wDialog">
		<implementation>
			<property name="transactionId" readonly="true">
				<getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', 'transactionid').value;
				]]></getter>
			</property>

			<property name="transactionText" readonly="true">
				<getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', 'transactiontext').value;
				]]></getter>
			</property>

			<property name="transactionDate" readonly="true">
				<getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', 'transactiondate').value;
				]]></getter>
			</property>

			<method name="onInitialize">
				<body><![CDATA[
					this.autoResize(500, 200);
					document.getAnonymousElementByAttribute(this, 'anonid', 'amount')
						.setAttribute('value', this.parameters.rowData.amount);
					document.getAnonymousElementByAttribute(this, 'anonid', 'number')
						.setAttribute('value', this.parameters.rowData.label);
					document.getAnonymousElementByAttribute(this, 'anonid', 'transactionid')
						.setAttribute('value', this.parameters.rowData.trsid);
				]]></body>
			</method>

			<method name="checkValidate">
				<body><![CDATA[
					var disabled = (this.transactionId.length == 0 || this.transactionText.length == 0 || this.transactionDate.length == 0);
					document.getAnonymousElementByAttribute(this, 'anonid', 'ok').disabled = disabled;
				]]></body>
			</method>

			<method name="onCancel">
				<body><![CDATA[
					this.controller.closeModalDialog();
				]]></body>
			</method>

			<method name="onOk">
				<body><![CDATA[
					var rowData = this.parameters.rowData;
					var parameters = {cmpref: rowData.id, lang: rowData.lang, 
							transactionDate: this.transactionDate, transactionId: this.transactionId, 
							transactionText: this.transactionText};
					var result = wCore.executeJSON("order", "ValidateBill", parameters, null , true); 	
					if (result.status === 'OK')
					{
						this.parameters.rowData.status = result.contents.status;
						this.parameters.rowData.st = result.contents.st;
						this.parameters.rowData.archive = result.contents.archive;
						this.parameters.callBack();
						this.controller.closeModalDialog();
					}
					else
					{
						alert(result.contents.errorMessage);
					}
				]]></body>
			</method>

			<method name="onFail">
				<body><![CDATA[
					if (confirm("${transui:m.order.bo.general.Confirm-cancel-bill,ucf,js}"))
					{
						var rowData = this.parameters.rowData;
						var parameters = {cmpref: rowData.id, lang: rowData.lang, cancel: 'true'};
						var result = wCore.executeJSON("order", "ValidateBill", parameters, null , true);
						if (result.status === 'OK')
						{
							this.parameters.rowData.status = result.contents.status;
							this.parameters.rowData.st = result.contents.st;
							this.parameters.rowData.archive = result.contents.archive;
							this.parameters.callBack();
							this.controller.closeModalDialog();
						}
						else
						{
							alert(result.contents.errorMessage);
						}
					}
				]]></body>
			</method>
		</implementation>
		<xbl:content>
			<xul:vbox flex="1">
				<xul:hbox class="dialog-header">
					<xul:label value="${transui:m.order.bo.general.Validate-bill,ucf,attr}" class="dialog-title" />
					<xul:spacer flex="1" />
					<xul:vbox pack="center">
						<xul:toolbarbutton height="16" width="16" image="{IconsBase}/small/delete.png" oncommand="onCancel();"
							tooltiptexts="${transui:m.uixul.bo.dialog.Cancel,ucf,attr}" />
					</xul:vbox>
				</xul:hbox>
				<xul:grid flex="1">
					<xul:columns>
						<xul:column />
						<xul:column flex="1" />
					</xul:columns>
					<xul:rows>
						<xul:row>
							<xul:label value="${transui:m.order.document.bill.Label,ucf,attr}" />
							<xul:label anonid="number" value="-" />
						</xul:row>
						<xul:row>
							<xul:label value="${transui:m.order.document.bill.Amount,ucf,attr}" />
							<xul:label anonid="amount" value="-" />
						</xul:row>
						<xul:row>
							<xul:label value="${transui:m.order.document.bill.transactionDate,ucf,attr}" />
							<xul:cfield name="transactiondate" anonid="transactiondate" hidehelp="true" fieldtype="datetime" initialvalue=""
								timeoffset="30" />
						</xul:row>
						<xul:row>
							<xul:label value="${transui:m.order.document.bill.Transactionid,ucf,attr}" />
							<xul:textbox anonid="transactionid" value="" size="30" maxlength="30" onchange="checkValidate()" />
						</xul:row>
						<xul:row>
							<xul:label value="${transui:m.order.document.bill.Transactiontext,ucf,attr}" />
							<xul:textbox anonid="transactiontext" value="" multiline="true" maxlength="512" cols="40" rows="5" oninput="checkValidate()" />
						</xul:row>
					</xul:rows>
				</xul:grid>
				<xul:hbox pack="center" style="height: 32px">
					<xul:button image="{IconsBase}/small/check.png" disabled="true" anonid="ok" oncommand="onOk()"
						label="${transui:m.order.bo.general.Validate,ucf,attr}" />
					<xul:button image="{IconsBase}/small/forbidden.png" anonid="ok" oncommand="onFail()" label="${transui:m.order.bo.general.Cancel,ucf,attr}" />
					<xul:button image="{IconsBase}/small/delete.png" oncommand="onCancel()" label="${transui:m.uixul.bo.dialog.Close,ucf,attr}" />
				</xul:hbox>
			</xul:vbox>
		</xbl:content>
	</binding>

	<binding id="shipExpeditionDialog" extends="core.wDialog#wDialog">
		<implementation>
			<property name="shippingDate" readonly="true">
				<getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', 'shippingdate').value;
				]]></getter>
			</property>

			<property name="trackingNumber" readonly="true">
				<getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', 'trackingnumber').value;
				]]></getter>
			</property>

			<property name="packetNumber" readonly="true">
				<getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', 'packetnumber').value;
				]]></getter>
			</property>

			<method name="onInitialize">
				<body><![CDATA[
					this.autoResize(500, 200);
					document.getAnonymousElementByAttribute(this, 'anonid', 'transporteur')
						.setAttribute('value', this.parameters.rowData.transporteur);
					document.getAnonymousElementByAttribute(this, 'anonid', 'number')
						.setAttribute('value', this.parameters.rowData.label);
				]]></body>
			</method>

			<method name="checkValidate">
				<body><![CDATA[
					var disabled = (this.shippingDate.length == 0);
					document.getAnonymousElementByAttribute(this, 'anonid', 'ok').disabled = disabled;
				]]></body>
			</method>

			<method name="onCancel">
				<body><![CDATA[
					this.controller.closeModalDialog();
				]]></body>
			</method>

			<method name="onOk">
				<body><![CDATA[
					var rowData = this.parameters.rowData;
					var parameters = {cmpref: rowData.id, lang: rowData.lang, 
							shippingDate: this.shippingDate, trackingNumber: this.trackingNumber, packetNumber: this.packetNumber};
					var result = wCore.executeJSON("order", "ShipExpedition", parameters, null , true); 	
					if (result.status === 'OK')
					{
						this.parameters.rowData.status = result.contents.status;
						this.parameters.rowData.st = result.contents.st;
						this.parameters.rowData.traking = result.contents.traking;
						this.parameters.callBack();
						this.controller.closeModalDialog();
					}
					else
					{
						alert(result.contents.errorMessage);
					}
				]]></body>
			</method>

			<method name="onFail">
				<body><![CDATA[
					if (confirm("${transui:m.order.bo.general.Confirm-cancel-expedition,ucf,js}"))
					{
						var rowData = this.parameters.rowData;
						var parameters = {cmpref: rowData.id, lang: rowData.lang, cancel: 'true'};
						var result = wCore.executeJSON("order", "ShipExpedition", parameters, null , true);
						if (result.status === 'OK')
						{
							this.parameters.rowData.status = result.contents.status;
							this.parameters.rowData.st = result.contents.st;
							this.parameters.rowData.traking = result.contents.traking;
							this.parameters.callBack();
							this.controller.closeModalDialog();
						}
						else
						{
							alert(result.contents.errorMessage);
						}
					}
				]]></body>
			</method>

		</implementation>
		<xbl:content>
			<xul:vbox flex="1">
				<xul:hbox class="dialog-header">
					<xul:label value="${transui:m.order.bo.general.ship-expedition,ucf,attr}" class="dialog-title" />
					<xul:spacer flex="1" />
					<xul:vbox pack="center">
						<xul:toolbarbutton height="16" width="16" image="{IconsBase}/small/delete.png" oncommand="onCancel();"
							tooltiptexts="${transui:m.uixul.bo.dialog.Cancel,ucf,attr}" />
					</xul:vbox>
				</xul:hbox>
				<xul:grid flex="1">
					<xul:columns>
						<xul:column />
						<xul:column flex="1" />
					</xul:columns>
					<xul:rows>
						<xul:row>
							<xul:label value="${transui:m.order.document.expedition.label,ucf,attr}" />
							<xul:label anonid="number" value="-" />
						</xul:row>
						<xul:row>
							<xul:label value="${transui:m.order.document.expedition.transporteur,ucf,attr}" />
							<xul:label anonid="transporteur" value="-" />
						</xul:row>
						<xul:row>
							<xul:label value="${transui:m.order.document.expedition.shippingdate,ucf,attr}" />
							<xul:cfield name="shippingdate" anonid="shippingdate" hidehelp="true" fieldtype="datetime" initialvalue="" timeoffset="30" />
						</xul:row>
						<xul:row>
							<xul:label value="${transui:m.order.document.expedition.trackingnumber,ucf,attr}" />
							<xul:textbox anonid="trackingnumber" value="" maxlength="30" />
						</xul:row>
						<xul:row>
							<xul:label value="${transui:m.order.document.expedition.packetnumber,ucf,attr}" />
							<xul:textbox anonid="packetnumber" value="" maxlength="30" />
						</xul:row>
					</xul:rows>
				</xul:grid>
				<xul:hbox pack="center" style="height: 32px">
					<xul:button image="{IconsBase}/small/check.png" disabled="true" anonid="ok" oncommand="onOk()"
						label="${transui:m.order.bo.general.Validate,ucf,attr}" />
					<xul:button image="{IconsBase}/small/forbidden.png" anonid="ok" oncommand="onFail()" label="${transui:m.order.bo.general.Cancel,ucf,attr}" />
					<xul:button image="{IconsBase}/small/delete.png" oncommand="onCancel()" label="${transui:m.uixul.bo.dialog.Close,ucf,attr}" />
				</xul:hbox>
			</xul:vbox>
		</xbl:content>
		<xbl:handlers>
			<xbl:handler event="fieldModified"><![CDATA[
				this.checkValidate();
			]]></xbl:handler>
		</xbl:handlers>
	</binding>

	<!-- Expedition resume -->

	<binding id="cExpeditionLinesResumeSection" extends="layout.cDocumentEditor#cResumeSection">
		<implementation>
			<field name="mTmpData">null</field>

			<method name="setValues">
				<parameter name="values" />
				<body><![CDATA[
					var section = this.childNodes[0];
					if (section == null)
					{
						section = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'xul:linesgrid');
						section.setAttribute('flex', '1');
						var handler = {
							section: section,
							value: values[this.name],
							handleEvent: function(event)
							{
								wCore.debug('setJSONDataset in gridInitialised');
								this.section.setJSONDataset(this.value);
							}
						}
						section.addEventListener('gridInitialised', handler, false);
						this.appendChild(section);	
					}
					else if ('setJSONDataset' in section)
					{
						wCore.debug('setJSONDataset in section');
						section.setJSONDataset(values[this.name]);
					}
				]]></body>
			</method>
		</implementation>
	</binding>

	<binding id="cExpeditionLinesGrid" extends="widgets.cGrid#cAbstractSortableGrid">
		<implementation>
			<constructor><![CDATA[
				this.fireEvent('gridInitialised');
			]]></constructor>
		</implementation>
		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled">
				<xul:columns>
					<xul:column flex="1" />
					<xul:column />
					<xul:column />
					<xul:column />
				</xul:columns>
				<xul:rows anonid="document-rows">
					<xul:row class="head" anonid="head-row">
						<xul:label name="label" value="${transui:m.order.frontoffice.designation,ucf,attr}" />
						<xul:label name="codeReference" value="${transui:m.order.frontoffice.codeReference,ucf,attr}" />
						<xul:label name="packetnumber" value="${transui:m.order.document.expedition.packetnumber,ucf,attr}" />
						<xul:label name="quantity" value="${transui:m.order.frontoffice.quantity,ucf,attr}" />
					</xul:row>
				</xul:rows>
			</xul:grid>
			<xul:row anonid="template-row" class="document" hidden="true">
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
			</xul:row>
		</content>
	</binding>

	<binding id="cEditExpeditionLinesGrid" extends="widgets.cGrid#cAbstractSortableGrid">
		<implementation>
			<constructor><![CDATA[
				this.fireEvent('gridInitialised');
			]]></constructor>

			<method name="getDatarowKey">
				<parameter name="datarow" />
				<body><![CDATA[
					return datarow.id + ',' + datarow.packetnumber + ',' + datarow.trackingnumber;
				]]></body>
			</method>

			<method name="execute_update">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					if (this.disabled) {return;}
					var dataset = this.buildDataset();
					this.mCurrentDatasetKey = this.generateDatasetKey(dataset);
					this.dispatchChanged();
				]]></body>
			</method>
		</implementation>

		<xbl:handlers>
			<xbl:handler event="input"><![CDATA[
				var ctrl = event.originalTarget;
				while (ctrl != null && ctrl.localName != 'textbox') {ctrl = ctrl.parentNode;}
				if (ctrl != null)
				{
					var rowNode = ctrl.parentNode;
					var rowData = rowNode.mDataRow;
					rowData[ctrl.getAttribute('cn')] = ctrl.value;
					this.execute_update(rowNode, rowData);
				}
			]]></xbl:handler>
		</xbl:handlers>

		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled">
				<xul:columns>
					<xul:column />
					<xul:column flex="1" />
					<xul:column />
					<xul:column style="width:15em;" />
					<xul:column style="width:15em;" />
				</xul:columns>
				<xul:rows anonid="document-rows">
					<xul:row class="head" anonid="head-row">
						<xul:label name="quantity" value="${transui:m.order.frontoffice.quantity,ucf,attr}" />
						<xul:label name="label" value="${transui:m.order.frontoffice.designation,ucf,attr}" />
						<xul:label name="codereference" value="${transui:m.order.frontoffice.codeReference,ucf,attr}" />
						<xul:label name="packetnumber" value="${transui:m.order.document.expedition.packetnumber,ucf,attr}" />
						<xul:label name="trackingnumber" value="${transui:m.order.document.expedition.trackingnumber,ucf,attr}" />
					</xul:row>
				</xul:rows>
			</xul:grid>
			<xul:row anonid="template-row" class="document" hidden="true">
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:textbox value="" size="15" cn="packetnumber" />
				<xul:textbox value="" size="15" cn="trackingnumber" />
			</xul:row>
		</content>
	</binding>

	<binding id="cShipExpeditionProperty" extends="layout.cDocumentEditor#cLinkProperty">
		<implementation>
			<field name="rowData" />

			<method name="setValue">
				<parameter name="val" />
				<body><![CDATA[
					if (val)
					{
						this.setAttribute('linklabel', val.label);
						if ('rowData' in val)
						{
							this.setAttribute('linkclass', 'text-link');
							this.rowData = val.rowData;
						}
						else
						{
							this.setAttribute('linkclass', 'text-error');
							this.rowData = null;
						}
						this.removeAttribute('hidden');
					}
					else
					{
						this.setAttribute('linklabel', '');
						this.rowData = null;
						this.setAttribute('hidden', 'true');
					}
				]]></body>
			</method>

			<method name="click">
				<body><![CDATA[
					if (this.rowData !== null)
					{
						var me = this;
						var callBack = function() { me.onShipped(); }
						getController().openModalDialog(this, 'ShipExpedition', {callBack: callBack, rowData: wCore.parseJSON(this.rowData)});
					}
				]]></body>
			</method>

			<method name="onShipped">
				<body><![CDATA[
					var module = this.parentNode;
					while (module && module.tagName != "wmodule")
					{
						module = module.parentNode;
					}
					module.refreshMainViewDeck();
				]]></body>
			</method>
		</implementation>
	</binding>

	<!-- Credit notes -->

	<binding id="cCreditNotesSoratbleGrid" extends="widgets.cGrid#cAbstractSortableGrid">
		<implementation>
			<constructor><![CDATA[
				this.fireEvent('gridInitialised');
			]]></constructor>

			<method name="execute_edit">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					if (this.disabled) {return;}
					var uri = ['order', 'openDocument', rowData.type, rowData.id].join(',');
					openActionUri(uri);
				]]></body>
			</method>

			<method name="execute_manualrecredit">
				<parameter name="rowNode" />
				<parameter name="rowData" />
				<body><![CDATA[
					if (!rowData.canReCreditNote) {return;}
					try
					{
						var me = this;
						getController().openModalDialog(this, 'ReCreditNote', {
							cmpref: rowData.id, 
							lang: rowData.lang,
							rowData: rowData,
							callBack : function() {
								me.refreshUI(me.buildDataset());
							}
						});
					}
					catch (e)
					{
						wCore.error('cCreditNotesSoratbleGrid.manualrecredit', [], e);
					}
				]]></body>
			</method>

			<method name="setCellValue">
				<parameter name="cell" />
				<parameter name="name" />
				<parameter name="dataRow" />
				<body><![CDATA[
					if (name == 'actionrow')
					{
						cell.childNodes[1].setAttribute('disabled', dataRow.canReCreditNote ? 'false' : 'true');
						return;
					}
					if ('value' in cell)
					{
						cell.value = dataRow[name];
					}
					else
					{
						cell.setAttribute('value', dataRow[name]);
					}
				]]></body>
			</method>

		</implementation>
		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled">
				<xul:columns>
					<xul:column />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column />
				</xul:columns>
				<xul:rows anonid="document-rows">
					<xul:row class="head" anonid="head-row">
						<xul:label name="status" value="${transui:m.order.document.creditnote.status-header,ucf,attr}" />
						<xul:label name="label" value="${transui:m.order.document.creditnote.Label,ucf,attr}" />
						<xul:label name="amount" value="${transui:m.order.document.creditnote.Amount,ucf,attr}" />
						<xul:label name="amountNotApplied" value="${transui:m.order.document.creditnote.AmountNotApplied,ucf,attr}" />
						<xul:label name="actionrow" value="${transui:m.order.bo.doceditor.Actions,ucf,attr}" />
					</xul:row>
				</xul:rows>
			</xul:grid>
			<xul:row anonid="template-row" class="document" hidden="true">
				<xul:cpublicationcell value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:toolbar class="actions">
					<xul:toolbarbutton action="edit" image="{IconsBase}/small/edit.png" tooltiptext="${transui:m.uixul.bo.actions.Edit,ucf,attr}" />
					<xul:toolbarbutton action="manualrecredit" image="{IconsBase}/small/cheque.png" tooltiptext="${transui:m.order.document.creditnote.Manual-recredit,ucf,attr}" />
				</xul:toolbar>
			</xul:row>
		</content>
	</binding>

	<binding id="cReCreditNoteDialog" extends="core.wDialog#wDialog">
		<implementation>
			<method name="onInitialize">
				<body><![CDATA[
					this.autoResize(500, 200);
					document.getAnonymousElementByAttribute(this, 'anonid', 'number')
						.setAttribute('value', this.parameters.rowData.label);
					
					document.getAnonymousElementByAttribute(this, 'anonid', 'amount')
						.setAttribute('value', this.parameters.rowData.amountNotApplied);
					
					if (this.parameters.rowData.canReCreditNote)
					{
						document.getAnonymousElementByAttribute(this, 'anonid', 'ok').disabled = false;
					}
					else
					{
						document.getAnonymousElementByAttribute(this, 'anonid', 'ok').disabled = true;
					}
				]]></body>
			</method>

			<method name="onCancel">
				<body><![CDATA[
					this.controller.closeModalDialog();
				]]></body>
			</method>

			<property name="transactionText" readonly="true">
				<getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', 'transactiontext').value;
				]]></getter>
			</property>

			<property name="transactionDate" readonly="true">
				<getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', 'transactiondate').value;
				]]></getter>
			</property>

			<method name="onOk">
				<body><![CDATA[
					var rowData = this.parameters.rowData;
					var parameters = {cmpref: rowData.id, lang: rowData.lang, 
						transactiontext: this.transactionText, transactiondate: this.transactionDate};
					var result = wCore.executeJSON("order", "ReCreditNote", parameters, null , true); 	
					if (result.status === 'OK')
					{
						this.parameters.rowData.canReCreditNote = result.contents.canReCreditNote;
						this.parameters.rowData.amountNotApplied = result.contents.amountNotApplied;
						if (this.parameters.callBack)
						{
							this.parameters.callBack();
						}
						this.controller.closeModalDialog();
					}
					else
					{
						alert(result.contents.errorMessage);
					}
				]]></body>
			</method>
		</implementation>
		<xbl:content>
			<xul:vbox flex="1">
				<xul:hbox class="dialog-header">
					<xul:label value="${transui:m.order.document.creditnote.Recredit-dialog-title,ucf,attr}" class="dialog-title" />
					<xul:spacer flex="1" />
					<xul:vbox pack="center">
						<xul:toolbarbutton height="16" width="16" image="{IconsBase}/small/delete.png" oncommand="onCancel();"
							tooltiptexts="${transui:m.uixul.bo.dialog.Cancel,ucf,attr}" />
					</xul:vbox>
				</xul:hbox>
				<xul:grid flex="1">
					<xul:columns>
						<xul:column />
						<xul:column flex="1" />
					</xul:columns>
					<xul:rows>
						<xul:row>
							<xul:label value="${transui:m.order.document.creditnote.Label,ucf,attr}" />
							<xul:label anonid="number" value="-" />
						</xul:row>
						<xul:row>
							<xul:label value="${transui:m.order.document.creditnote.Amount,ucf,attr}" />
							<xul:label anonid="amount" value="-" />
						</xul:row>
						<xul:row>
							<xul:label value="${transui:m.order.document.creditnote.Transactiondate,ucf,attr}" />
							<xul:cfield name="transactiondate" anonid="transactiondate" hidehelp="true" fieldtype="datetime" initialvalue=""
								timeoffset="30" />
						</xul:row>
						<xul:row>
							<xul:label value="${transui:m.order.document.creditnote.Transactiontext,ucf,attr}" />
							<xul:textbox anonid="transactiontext" value="" multiline="true" maxlength="512" cols="40" rows="5" />
						</xul:row>
					</xul:rows>
				</xul:grid>
				<xul:hbox pack="center" style="height: 32px">
					<xul:button image="{IconsBase}/small/check.png" disabled="true" anonid="ok" oncommand="onOk()"
						label="${transui:m.order.document.creditnote.Recredit-action,ucf,attr}" />
					<xul:button image="{IconsBase}/small/delete.png" oncommand="onCancel()" label="${transui:m.uixul.bo.dialog.Close,ucf,attr}" />
				</xul:hbox>
			</xul:vbox>
		</xbl:content>
	</binding>

	<binding id="cOrderTransactionInfo" extends="layout.cDocumentEditor#cProperty">
		<content>
			<xul:vbox anonid="infos">
			</xul:vbox>
		</content>
		<implementation>
			<method name="setValue">
				<parameter name="infos" />
				<body><![CDATA[
					var infosElem = document.getAnonymousElementByAttribute(this, "anonid", "infos");
					while (infosElem.hasChildNodes())
					{
						infosElem.removeChild(infosElem.childNodes.item(0));
					}
					if (infos === null || infos.length == 0)
					{
						this.setAttribute('hidden', 'true');
						return;
					}
					this.removeAttribute('hidden');
					for (var i = 0; i < infos.length; i++)
					{
						var info = infos[i];
						var hbox = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'xul:hbox');
						
						var label = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'xul:label');
						label.setAttribute("value", info.label);
						label.setAttribute("class", "label");
						hbox.appendChild(label);
						
						var sep = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'xul:label');
						sep.setAttribute("value", ":");
						sep.setAttribute("class", "label separator");
						hbox.appendChild(sep);
						
						var value = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'xul:label');
						value.setAttribute("class", "value allow-text-selection");
						value.appendChild(document.createTextNode(info.value));
						hbox.appendChild(value);
						
						infosElem.appendChild(hbox);
					}
				]]></body>
			</method>
			<constructor><![CDATA[
				this.section.registerProperty(this, this.name);
			]]></constructor>
		</implementation>
	</binding>
</bindings>
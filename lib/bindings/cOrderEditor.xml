<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<!-- Properties panel -->

	<binding id="customerSection">
		<content>
			<xul:hbox align="center">
				<xul:clabel value="&amp;modules.order.bo.general.Email;" />
				<xul:label xbl:inherits="value=email" />
				<xul:toolbarbutton label="&amp;modules.order.bo.doceditor.panel.properties.View-customer;" image="{IconsBase}/small/customer.png" oncommand="showCustomer()" />
				<xul:spacer flex="1" />
			</xul:hbox>
		</content>
		<implementation>
			<method name="showCustomer">
				<body><![CDATA[
					var id = this.getAttribute('customerId');
					var uri = ['customer', 'openDocument', 'modules_customer_customer', id].join(',');
					var pnode = this.parentNode;
					while(!pnode.hasAttribute('documentid')) {pnode = pnode.parentNode;}
					var orderId = pnode.getAttribute('documentid')
					var from = ['order', 'openDocument', 'modules_order_order', orderId, 'properties'].join(',');
					openActionUri(uri, from);
				]]></body>
			</method>
		</implementation>
	</binding>

	<binding id="linesSection">
		<resources>
			<stylesheet src="modules.uixul.cFieldsGroup" />
		</resources>
		<content>
			<xul:groupbox flex="1">
				<xul:caption xbl:inherits="label" />
				<xul:grid class="cart-lines">
					<xul:columns>
						<xul:column flex="2" />
						<xul:column flex="1"/>
						<xul:column />
						<xul:column />
						<xul:column />
					</xul:columns>
					<xul:rows>
						<xbl:children />
					</xul:rows>
				</xul:grid>
			</xul:groupbox>
		</content>
	</binding>
	
	<binding id="headRow">
		<resources>
			<stylesheet src="modules.order.cOrderEditor" />
		</resources>
		<content>
			<xul:label value="&amp;modules.order.frontoffice.Designation;" />
			<xul:label value="&amp;modules.order.frontoffice.CodeReference;" />
			<xul:label value="&amp;modules.customer.bo.doceditor.panel.carts.Unit-price;" />
			<xul:label value="&amp;modules.order.frontoffice.Quantity;" />
			<xul:label value="&amp;modules.customer.bo.doceditor.panel.carts.Total-price;" />
		</content>
	</binding>	
	
	<binding id="lineRow">
		<resources>
			<stylesheet src="modules.order.cOrderEditor" />
		</resources>
		<content>
			<xul:vbox>
				<xul:label class="allow-text-selection" xbl:inherits="xbl:text=productLabel" />
			</xul:vbox>
			<xul:label class="allow-text-selection" xbl:inherits="xbl:text=codeReference" />
			<xul:vbox>
				<xul:label class="allow-text-selection" xbl:inherits="xbl:text=unitPriceWithoutTax" />
				<xul:label class="allow-text-selection" xbl:inherits="xbl:text=unitPriceWithTax" />
			</xul:vbox>
			<xul:label class="allow-text-selection" xbl:inherits="xbl:text=quantity" />
			<xul:vbox>
				<xul:label class="allow-text-selection" xbl:inherits="xbl:text=totalPriceWithoutTax" />
				<xul:label class="allow-text-selection" xbl:inherits="xbl:text=totalPriceWithTax" />
			</xul:vbox>
		</content>
	</binding>	
	
	<!-- Messages panel -->
	
	<binding id="cMessagesPanel" extends="layout.cDocumentEditor#cDocumentEditorPanel">
		<resources>
			<stylesheet src="modules.uixul.cFieldsGroup" />
			<stylesheet src="modules.order.cOrderEditor" />
		</resources>
		<content>
			<xul:vbox flex="1">
				<xul:cmessageinfo anonid="message" />
				<xul:scrollbox anonid="scrollctrl" flex="1" class="editordatacontainer" orient="vertical">
					<xul:groupbox class="messageForm">
						<xul:caption label="&amp;modules.order.bo.doceditor.panel.messages.Title;" />
						<vbox>
							<xul:cfield name="messageContent" anonid="field_messageContent" fieldtype="longtext" cols="100" hidehelp="true" />
							<hbox><xul:button anonid="sendMessageButton" label="&amp;modules.order.bo.doceditor.panel.messages.Send;" image="{IconsBase}/small//mail.png" /></hbox>
						</vbox>
					</xul:groupbox>
					<xul:vbox anonid="messages" />
					<xul:spacer flex="1" />
				</xul:scrollbox>					
			</xul:vbox>
		</content>
		<implementation>
			<constructor><![CDATA[
				var _this = this;
				var node = document.getAnonymousElementByAttribute(this, 'anonid', 'sendMessageButton');
				node.addEventListener('command', function () { _this.sendNewMessage(); }, true);
			]]></constructor>
		
			<method name="getInitializeParameters">
				<body><![CDATA[
					return {
						action: "LoadOrderMessages", 
						cmpref: this.documentEditor.documentid, 
						lang : Context.W_LANG
					};
				]]></body>
			</method>
									
			<method name="fireInitializeComplete">
				<parameter name="result" />
				<body><![CDATA[
					if (result.status != "OK")
					{
						this.showErrorMessage(result.contents.errorMessage);
					}
					else
					{									
						var messages = result.contents.messages;
						var message;
						var section;
						var messagesNode = document.getAnonymousElementByAttribute(this, "anonid", 'messages');
						for (var i = 0; i < messages.length; i++)
						{
							message = messages[i];
							section = messagesNode.childNodes[i];
							if (section == null)
							{
								section = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'section');
								section.className = 'message';
								messagesNode.appendChild(section);
							}
							else
							{
								section.removeAttribute('collapsed');
								section.removeChild(section.firstChild);
							}
							
							for (var name in message)
							{
								section.setAttribute(name, message[name]);
								if (message[name] && message[name] != '')
								{
									section.removeAttribute(name+'hidden');
								}
								else
								{
									section.setAttribute(name+'hidden', true);
								}
							}
							
							section.appendChild(document.createTextNode(message['content']));
						}
						while (section = messagesNode.childNodes[i])
						{
							section.setAttribute('collapsed', 'true');
							i++;
						}
					}
					this.mInitialized = true;
					this.gotoTop();
				]]></body>
			</method>
			
			<method name="sendNewMessage">
				<body><![CDATA[
					var node = document.getAnonymousElementByAttribute(this, 'anonid', 'field_messageContent');
					if (node.value)
					{
						var result = wCore.executeJSON('order', 'SendMessageForOrder', {cmpref: this.documentEditor.documentid, content: node.value}, null, true);
						if (result.status != 'OK')
						{	
							this.showErrorMessage(result.contents.errorMessage);
						}
						else
						{
							this.showTextMessage("&amp;modules.order.bo.doceditor.panel.messages.Success-sending-message;");
							this.fireInitializeComplete(result);
							node.value = '';
							this.documentEditor.refresh();
						}
					}
					else
					{
						this.showErrorMessage("&amp;modules.order.bo.doceditor.panel.messages.Error-no-message-to-send;");
					}
				]]></body>
			</method>
		</implementation>
	</binding>	

	<binding id="messageSection">
		<resources>
			<stylesheet src="modules.order.cOrderEditor" />
		</resources>
		<content>
			<xul:groupbox flex="1">
				<xul:caption xbl:inherits="label" />
				<xul:grid flex="1">
					<xul:columns>
						<xul:column />
						<xul:column flex="1" />
					</xul:columns>
					<xul:rows>
						<xul:row>
							<xul:label value="&amp;modules.order.document.message.Creationdate;" />
							<xul:label class="allow-text-selection" xbl:inherits="xbl:text=date" />
						</xul:row>
						<xul:row>
							<xul:label value="&amp;modules.order.document.message.Content;" />
							<xul:hbox flex="1">
								<html:div flex="1" anonid="content" class="allow-text-selection"><xbl:children /></html:div>
							</xul:hbox>
						</xul:row>
					</xul:rows>
				</xul:grid>
			</xul:groupbox>
		</content>
	</binding>
	
	<!-- Bills and shipping. -->
	<binding id="cBillgenerator" extends="form.cField#cHiddenField">
		<content>
			<children />
			<xul:vbox>
				<xul:hbox>
					<xul:button xbl:inherits="hidden=hide-generate,disabled=disable-generate" label="&amp;modules.order.bo.actions.GenerateBill;" oncommand="generate()" image="{IconsBase}/small/document-text.png" />
					<xul:button xbl:inherits="hidden=hide-dl" hidden="true" label="&amp;modules.order.bo.actions.DownloadBill;" oncommand="download()" image="{IconsBase}/small/download.png" />
					<xul:label xbl:inherits="hidden=hide-msg" value="&amp;modules.order.bo.actions.CannotGenerateBillMsg;" />
					
				</xul:hbox>
			</xul:vbox>
		</content>
		<implementation>
			<field name="tmpBillUrl"></field>
			<method name="setInitialValue">
				<parameter name="val" />
				<body><![CDATA[
					var fval = this.fixString(val);					
					if (fval == "-1")
					{
						this.setAttribute('hide-generate', 'true');
						this.setAttribute('hide-dl', 'true');
						this.removeAttribute('hide-msg');
					}
					else if (fval == "-2")
					{
						this.setAttribute('hide-generate', 'true');
						this.setAttribute('hide-dl', 'true');
						this.setAttribute('hide-msg', 'true');
					}
					else if (fval != "")
					{
						this.setAttribute('hide-generate', 'true');
						this.setAttribute('hide-msg', 'true');
						this.removeAttribute('hide-dl');
					}
					else
					{
						this.setAttribute('hide-dl', 'true');
						this.setAttribute('hide-msg', 'true');
						this.removeAttribute('hide-generate');
					}
					this.setAttribute("initialvalue", fval);
					this.setAttribute("value", fval);
				]]></body>
			</method>
			<method name="generate">
				<body><![CDATA[
					var propspanel = this.parentNode;
					while (propspanel && propspanel.tagName != "cpropertiespanel")
					{
						propspanel = propspanel.parentNode;
					}
					var edt = propspanel.documentEditor;
					this.setAttribute("disable-generate", true);
					try
					{
						
						propspanel.showTextMessage("&amp;modules.order.bo.actions.GeneratingBill;");
						var result = wCore.executeJSON("order", "GenerateBill", {cmpref: edt.documentid, lang: edt.mDocumentInfos.vo}, null , true); 	
						if (result.status === 'OK')
						{
							propspanel.showTextMessage("&amp;modules.order.bo.actions.GeneratingBillDone;");
							this.tmpBillUrl = result.contents.url;
							this.setAttribute('hide-generate', true);
							this.removeAttribute('hide-dl');
							
						}
						else
						{
							propspanel.showErrorMessage(result.contents.errorMessage);
						}
					}
					catch (e)
					{
						wCore.error('onGenerateBill', [], e);
					}
					this.removeAttribute("disable-generate", true);
				]]></body>
			</method>
			<method name="download">
				<body><![CDATA[
					if (this.value != "")
					{
						wToolkit.downloadurl(this.value);
					}
					else if (this.tmpBillUrl != "")
					{
						wToolkit.downloadurl(this.tmpBillUrl)
					}
				]]></body>
			</method>
		</implementation>
	</binding>
	
	<binding id="cBillsSoratbleGrid" extends="widgets.cGrid#cAbstractSortableGrid">
		<implementation>
			<constructor><![CDATA[
				this.fireEvent('gridInitialised');
			]]></constructor>
			
			<method name="execute_edit">
				<parameter name="rowNode" />
				<parameter name="rowData" />			
				<body><![CDATA[
					if (this.disabled) {return;}
					var uri = ['order', 'openDocument', rowData.type, rowData.id].join(',');
					openActionUri(uri);
				]]></body>
			</method>
			
			<method name="execute_validate">
				<parameter name="rowNode" />
				<parameter name="rowData" />			
				<body><![CDATA[
					if (this.disabled) {return;}
					var me = this;
					var node = rowNode;
					var data = rowData;
					var callBack = function() {me.onValidate(node, data);}
					getController().openModalDialog(this, 'ValidateBill', {callBack: callBack, rowData: rowData});
				]]></body>
			</method>
					
			<method name="onValidate">
				<parameter name="rowNode" />
				<parameter name="rowData" />			
				<body><![CDATA[
					this.setCellValue(rowNode.childNodes[2], 'status', rowNode.mDataRow);
					this.setCellArchiveValue(rowNode.childNodes[3], rowNode.mDataRow);
					
					var module = this.parentNode;
					while (module && module.tagName != "wmodule")
					{
						module = module.parentNode;
					}
					module.refreshMainViewDeck();
				]]></body>
			</method>
			
			<method name="execute_generate">
				<parameter name="rowNode" />
				<parameter name="rowData" />	
				<body><![CDATA[
					var propspanel = this.parentNode;
					var propspanel = this.parentNode;
					while (propspanel && propspanel.tagName != "cpropertiespanel")
					{
						propspanel = propspanel.parentNode;
					}
					
					try
					{
						propspanel.showTextMessage("&amp;modules.order.bo.actions.GeneratingBill;");
						var result = wCore.executeJSON("order", "GenerateBill", {cmpref: rowData.id, lang: rowData.lang}, null , true); 	
						wCore.debug(wCore.dump(result));
						if (result.status === 'OK')
						{
							propspanel.showTextMessage("&amp;modules.order.bo.actions.GeneratingBillDone;");
							rowNode.mDataRow.archive = result.contents.url;
							this.setCellArchiveValue(rowNode.childNodes[3], rowNode.mDataRow);
						}
						else
						{
							propspanel.showErrorMessage(result.contents.errorMessage);
						}
					}
					catch (e)
					{
						wCore.error('execute_generate', [rowNode, rowData], e);
					}
				]]></body>
			</method>
			
			<method name="execute_download">
				<parameter name="rowNode" />
				<parameter name="rowData" />			
				<body><![CDATA[
					if (this.disabled) {return;}					
					wToolkit.downloadurl(rowData.archive);
				]]></body>
			</method>
						
			<method name="setCellValue">
				<parameter name="cell" />
				<parameter name="name" />
				<parameter name="dataRow" />
				<body><![CDATA[	
					if (name === 'archive')
					{
						this.setCellArchiveValue(cell, dataRow);	
					}
					else
					{
						cell.setAttribute('value', dataRow[name]);
						if (name === 'status')
						{
							if (dataRow.st == 'waiting')
							{
								cell.setAttribute('class', 'text-link');
								cell.setAttribute('action', 'validate');
							}
							else
							{
								cell.removeAttribute('class');
								cell.removeAttribute('action');								
							}
						}
					}
				]]></body>
			</method>	
			
			<method name="setCellArchiveValue">
				<parameter name="cell" />
				<parameter name="dataRow" />
				<body><![CDATA[	
					if (dataRow.archive == "-1")
					{
						cell.setAttribute('value', "&amp;modules.order.bo.actions.CannotGenerateBillMsg;");
					}
					else if (dataRow.archive == "-2")
					{
						cell.setAttribute('value', "-");
					}
					else if (dataRow.archive == "")
					{
						cell.setAttribute('value', "&amp;modules.order.bo.actions.GenerateBill;");
						cell.setAttribute('class', 'text-link');
						cell.setAttribute('action', 'generate');
					}
					else
					{
						cell.setAttribute('value', "&amp;modules.order.bo.actions.DownloadBill;");
						cell.setAttribute('class', 'text-link');
						cell.setAttribute('action', 'download');
					}
				]]></body>
			</method>	
		</implementation>
		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled">
				<xul:columns>	
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column />
				</xul:columns>
				<xul:rows anonid="document-rows">
					<xul:row class="head" anonid="head-row">
						<xul:label name="label" value="&amp;modules.order.document.bill.Label;" />
						<xul:label name="amount" value="&amp;modules.order.document.bill.Amount;" />
						<xul:label name="trsid" value="&amp;modules.order.document.bill.TransactionId;" />					
						<xul:label name="status" value="&amp;modules.order.document.bill.Status;" />
						<xul:label name="archive" value="&amp;modules.order.document.bill.Archive;" />						
						<xul:label name="actionrow" value="&amp;modules.order.bo.doceditor.Actions;" />
					</xul:row>
				</xul:rows>
			</xul:grid>
			<xul:row anonid="template-row" class="document" hidden="true">
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:toolbar class="actions">
					<xul:toolbarbutton action="edit" image="{IconsBase}/small/edit.png" tooltiptext="&amp;modules.uixul.bo.actions.Edit;" />
				</xul:toolbar>
			</xul:row>				
		</content>
	</binding>
	
	<binding id="cExpeditionsSoratbleGrid" extends="widgets.cGrid#cAbstractSortableGrid">
		<implementation>
			<constructor><![CDATA[
				this.fireEvent('gridInitialised');
			]]></constructor>
			
			<method name="execute_edit">
				<parameter name="rowNode" />
				<parameter name="rowData" />			
				<body><![CDATA[
					if (this.disabled) {return;}
					var uri = ['order', 'openDocument', rowData.type, rowData.id].join(',');
					openActionUri(uri);
				]]></body>
			</method>
			
			<method name="execute_shipped">
				<parameter name="rowNode" />
				<parameter name="rowData" />			
				<body><![CDATA[
					if (this.disabled) {return;}
					var me = this;
					var node = rowNode;
					var data = rowData;
					var callBack = function() {me.onShipped(node, data);}
					getController().openModalDialog(this, 'ShipExpedition', {callBack: callBack, rowData: rowData});
				]]></body>
			</method>
			
			<method name="execute_tracking">
				<parameter name="rowNode" />
				<parameter name="rowData" />			
				<body><![CDATA[
					if (this.disabled) {return;}
					wToolkit.openurl(rowData.trackingurl);
				]]></body>
			</method>
					
			<method name="onShipped">
				<parameter name="rowNode" />
				<parameter name="rowData" />			
				<body><![CDATA[
					this.setCellValue(rowNode.childNodes[1], 'status', rowNode.mDataRow);
					this.setCellValue(rowNode.childNodes[3], 'traking', rowNode.mDataRow);
					
					var module = this.parentNode;
					while (module && module.tagName != "wmodule")
					{
						module = module.parentNode;
					}
					module.refreshMainViewDeck();
				]]></body>
			</method>
			
			<method name="setCellValue">
				<parameter name="cell" />
				<parameter name="name" />
				<parameter name="dataRow" />
				<body><![CDATA[	
					cell.setAttribute('value', dataRow[name]);
					if (name === 'status')
					{
						if (dataRow.st == 'prepare')
						{
							cell.setAttribute('class', 'text-link');
							cell.setAttribute('action', 'shipped');
						}
						else
						{
							cell.removeAttribute('class');
							cell.removeAttribute('action');								
						}
					}
					else if (name === 'trackingnumber')
					{
						if (dataRow.trackingurl)
						{
							cell.setAttribute('class', 'text-link');
							cell.setAttribute('action', 'tracking');
						}
						else
						{
							cell.removeAttribute('class');
							cell.removeAttribute('action');								
						}
					}
				]]></body>
			</method>		
		</implementation>
		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled">
				<xul:columns>	
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column flex="1" />
					<xul:column />
				</xul:columns>
				<xul:rows anonid="document-rows">
					<xul:row class="head" anonid="head-row">
						<xul:label name="label" value="&amp;modules.order.document.expedition.Label;" />
						<xul:label name="status" value="&amp;modules.order.document.expedition.TrackingText;" />
						<xul:label name="transporteur" value="&amp;modules.order.document.expedition.Transporteur;" />
						<xul:label name="trackingnumber" value="&amp;modules.order.document.expedition.TrackingNumber;" />
						<xul:label name="actionrow" value="&amp;modules.order.bo.doceditor.Actions;" />
					</xul:row>
				</xul:rows>
			</xul:grid>
			<xul:row anonid="template-row" class="document" hidden="true">
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
				<xul:toolbar class="actions">
					<xul:toolbarbutton action="edit" image="{IconsBase}/small/edit.png" tooltiptext="&amp;modules.uixul.bo.actions.Edit;" />
				</xul:toolbar>
			</xul:row>				
		</content>
	</binding>
	
	<binding id="validateBillDialog" extends="core.wDialog#wDialog">
		<implementation>
			<constructor><![CDATA[
				wCore.debug('validateBillDialog.constructor');	
			]]></constructor>
			
			<property name="transactionId" readonly="true">
				<getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', 'transactionid').value;
				]]></getter>
			</property>

			<property name="transactionText" readonly="true">
				<getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', 'transactiontext').value;
				]]></getter>
			</property>
			
			<property name="transactionDate" readonly="true">
				<getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', 'transactiondate').value;
				]]></getter>
			</property>
			
			<method name="onInitialize">
				<body><![CDATA[
					this.autoResize(500, 200);
					document.getAnonymousElementByAttribute(this, 'anonid', 'amount')
						.setAttribute('value', this.parameters.rowData.amount);
					document.getAnonymousElementByAttribute(this, 'anonid', 'number')
						.setAttribute('value', this.parameters.rowData.label);
					document.getAnonymousElementByAttribute(this, 'anonid', 'transactionid')
						.setAttribute('value', this.parameters.rowData.trsid);
				]]></body>
			</method>

			<method name="checkValidate">
				<body><![CDATA[
					var disabled = (this.transactionId.length == 0 || this.transactionText.length == 0 || this.transactionDate.length == 0);
					document.getAnonymousElementByAttribute(this, 'anonid', 'ok').disabled = disabled;
				]]></body>
			</method>

			<method name="onCancel">
				<body><![CDATA[
					this.controller.closeModalDialog();
				]]></body>
			</method>
			
			<method name="onOk">
				<body><![CDATA[
					var rowData = this.parameters.rowData;
					var parameters = {cmpref: rowData.id, lang: rowData.lang, 
							transactionDate: this.transactionDate, transactionId: this.transactionId, 
							transactionText: this.transactionText};
					var result = wCore.executeJSON("order", "ValidateBill", parameters, null , true); 	
					if (result.status === 'OK')
					{
						this.parameters.rowData.status = result.contents.status;
						this.parameters.rowData.st = result.contents.st;
						this.parameters.rowData.archive = result.contents.archive;
						this.parameters.callBack();
						this.controller.closeModalDialog();
					}
					else
					{
						alert(result.contents.errorMessage);
					}						
				]]></body>
			</method>
			
			<method name="onFail">
				<body><![CDATA[
					if (confirm("&amp;modules.order.bo.general.Confirm-cancel-bill;"))
					{
						var rowData = this.parameters.rowData;		
						var parameters = {cmpref: rowData.id, lang: rowData.lang, cancel: 'true'};
						var result = wCore.executeJSON("order", "ValidateBill", parameters, null , true); 	
						if (result.status === 'OK')
						{
							this.parameters.rowData.status = result.contents.status;
							this.parameters.rowData.st = result.contents.st;
							this.parameters.rowData.archive = result.contents.archive;
							this.parameters.callBack();
							this.controller.closeModalDialog();
						}
						else
						{
							alert(result.contents.errorMessage);
						}
					}
				]]></body>
			</method>
		</implementation>
		<xbl:content>
			<xul:vbox flex="1">
				<xul:hbox class="dialog-header">
					<xul:label value="&amp;modules.order.bo.general.Validate-bill;" class="dialog-title" />
					<xul:spacer flex="1" />
					<xul:vbox pack="center">
						<xul:toolbarbutton height="16" width="16" image="{IconsBase}/small/delete.png" oncommand="onCancel();" tooltiptexts="&amp;modules.uixul.bo.dialog.Cancel;" />
					</xul:vbox>
				</xul:hbox>
				<xul:grid flex="1">
					<xul:columns>	
						<xul:column />
						<xul:column flex="1" />						
					</xul:columns>
					<xul:rows>
						<xul:row>
							<xul:label value="&amp;modules.order.document.bill.Label;" />
							<xul:label anonid="number" value="-" />
						</xul:row>	
						<xul:row>
							<xul:label value="&amp;modules.order.document.bill.Amount;" />
							<xul:label anonid="amount" value="-" />
						</xul:row>							
						<xul:row>
							<xul:label value="&amp;modules.order.document.bill.transactionDate;" />
							<xul:cfield name="transactiondate" anonid="transactiondate" hidehelp="true" fieldtype="datetime" initialvalue="" timeoffset="30"/>
						</xul:row>
						<xul:row>
							<xul:label value="&amp;modules.order.document.bill.Transactionid;" />
							<xul:textbox anonid="transactionid" value="" size="30" maxlength="30" onchange="checkValidate()"/>							
						</xul:row>	
						<xul:row>
							<xul:label value="&amp;modules.order.document.bill.Transactiontext;" />
							<xul:textbox anonid="transactiontext" value="" multiline="true" maxlength="512" cols="40" rows="5" oninput="checkValidate()" />
						</xul:row>												
					</xul:rows>
				</xul:grid>
				<xul:hbox pack="center" style="height: 32px">
					<xul:button image="{IconsBase}/small/check.png" disabled="true" anonid="ok" oncommand="onOk()" label="&amp;modules.order.bo.general.Validate;" />
					<xul:button image="{IconsBase}/small/forbidden.png" anonid="ok" oncommand="onFail()" label="&amp;modules.order.bo.general.Cancel;" />
					<xul:button image="{IconsBase}/small/delete.png" oncommand="onCancel()" label="&amp;modules.uixul.bo.dialog.Close;" />
				</xul:hbox>
			</xul:vbox>
		</xbl:content>
	</binding>
	
	<binding id="shipExpeditionDialog" extends="core.wDialog#wDialog">
		<implementation>
			<constructor><![CDATA[
				wCore.debug('shipExpeditionDialog.constructor');	
			]]></constructor>
			
			<property name="shippingDate" readonly="true">
				<getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', 'shippingdate').value;
				]]></getter>
			</property>

			<property name="trackingNumber" readonly="true">
				<getter><![CDATA[
					return document.getAnonymousElementByAttribute(this, 'anonid', 'trackingnumber').value;
				]]></getter>
			</property>
			
			<method name="onInitialize">
				<body><![CDATA[
					this.autoResize(500, 200);
					document.getAnonymousElementByAttribute(this, 'anonid', 'transporteur')
						.setAttribute('value', this.parameters.rowData.transporteur);
					document.getAnonymousElementByAttribute(this, 'anonid', 'number')
						.setAttribute('value', this.parameters.rowData.label);
				]]></body>
			</method>

			<method name="checkValidate">
				<body><![CDATA[
					var disabled = (this.shippingDate.length == 0);
					document.getAnonymousElementByAttribute(this, 'anonid', 'ok').disabled = disabled;
				]]></body>
			</method>

			<method name="onCancel">
				<body><![CDATA[
					this.controller.closeModalDialog();
				]]></body>
			</method>
			
			<method name="onOk">
				<body><![CDATA[
					var rowData = this.parameters.rowData;
					var parameters = {cmpref: rowData.id, lang: rowData.lang, 
							shippingDate: this.shippingDate, trackingNumber: this.trackingNumber};
					var result = wCore.executeJSON("order", "ShipExpedition", parameters, null , true); 	
					if (result.status === 'OK')
					{
						this.parameters.rowData.status = result.contents.status;
						this.parameters.rowData.st = result.contents.st;
						this.parameters.rowData.traking = result.contents.traking;
						this.parameters.callBack();
						this.controller.closeModalDialog();
					}
					else
					{
						alert(result.contents.errorMessage);
					}						
				]]></body>
			</method>
			
			<method name="onFail">
				<body><![CDATA[
					if (confirm("&amp;modules.order.bo.general.Confirm-cancel-expedition;"))
					{
						var rowData = this.parameters.rowData;		
						var parameters = {cmpref: rowData.id, lang: rowData.lang, cancel: 'true'};
						var result = wCore.executeJSON("order", "ShipExpedition", parameters, null , true); 	
						if (result.status === 'OK')
						{
							this.parameters.rowData.status = result.contents.status;
							this.parameters.rowData.st = result.contents.st;
							this.parameters.rowData.traking = result.contents.traking;
							this.parameters.callBack();
							this.controller.closeModalDialog();
						}
						else
						{
							alert(result.contents.errorMessage);
						}
					}
				]]></body>
			</method>			
			
		</implementation>
		<xbl:content>
			<xul:vbox flex="1">
				<xul:hbox class="dialog-header">
					<xul:label value="&amp;modules.order.bo.general.Ship-Expedition;" class="dialog-title" />
					<xul:spacer flex="1" />
					<xul:vbox pack="center">
						<xul:toolbarbutton height="16" width="16" image="{IconsBase}/small/delete.png" oncommand="onCancel();" tooltiptexts="&amp;modules.uixul.bo.dialog.Cancel;" />
					</xul:vbox>
				</xul:hbox>
				<xul:grid flex="1">
					<xul:columns>	
						<xul:column />
						<xul:column flex="1" />						
					</xul:columns>
					<xul:rows>
						<xul:row>
							<xul:label value="&amp;modules.order.document.expedition.Label;" />
							<xul:label anonid="number" value="-" />
						</xul:row>	
						<xul:row>
							<xul:label value="&amp;modules.order.document.expedition.Transporteur;" />
							<xul:label anonid="transporteur" value="-" />
						</xul:row>							
						<xul:row>
							<xul:label value="&amp;modules.order.document.expedition.Shippingdate;" />
							<xul:cfield name="shippingdate" anonid="shippingdate" hidehelp="true" fieldtype="datetime" initialvalue="" timeoffset="30"/>
						</xul:row>
						<xul:row>
							<xul:label value="&amp;modules.order.document.expedition.Trackingnumber;" />
							<xul:textbox anonid="trackingnumber" value="" size="30" maxlength="30" />							
						</xul:row>										
					</xul:rows>
				</xul:grid>
				<xul:hbox pack="center" style="height: 32px">
					<xul:button image="{IconsBase}/small/check.png" disabled="true" anonid="ok" oncommand="onOk()" label="&amp;modules.order.bo.general.Validate;" />
					<xul:button image="{IconsBase}/small/forbidden.png" anonid="ok" oncommand="onFail()" label="&amp;modules.order.bo.general.Cancel;" />
					<xul:button image="{IconsBase}/small/delete.png" oncommand="onCancel()" label="&amp;modules.uixul.bo.dialog.Close;" />
				</xul:hbox>
			</xul:vbox>
		</xbl:content>
		<xbl:handlers>
			<xbl:handler event="fieldModified"><![CDATA[
				this.checkValidate();
			]]></xbl:handler>
		</xbl:handlers>
	</binding>
	
	<!-- Expedition resume -->
	
	<binding id="cExpeditionLinesResumeSection" extends="layout.cDocumentEditor#cResumeSection">
		<implementation>
			<method name="setValues">
				<parameter name="values" />
				<body><![CDATA[
					var section = this.childNodes[0];
					if (section == null)
					{
						section = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'xul:linesgrid');
						section.setAttribute('flex', '1');
						this.appendChild(section);
					}
					section.setJSONDataset(values[this.name]);
				]]></body>
			</method>		
		</implementation>
	</binding>
	
	<binding id="cExpeditionLinesGrid" extends="widgets.cGrid#cAbstractSortableGrid">
		<implementation>
			<constructor><![CDATA[
				this.fireEvent('gridInitialised');
			]]></constructor>
		</implementation>
		<content>
			<xul:grid flex="1" anonid="grid" xbl:inherits="disabled">
				<xul:columns>	
					<xul:column flex="2" />
					<xul:column flex="2" />
					<xul:column />
				</xul:columns>
				<xul:rows anonid="document-rows">
					<xul:row class="head" anonid="head-row">
						<xul:label name="label" value="&amp;modules.order.frontoffice.Designation;" />
						<xul:label name="codeReference" value="&amp;modules.order.frontoffice.CodeReference;" />
						<xul:label name="quantity" value="&amp;modules.order.frontoffice.Quantity;" />
					</xul:row>
				</xul:rows>
			</xul:grid>
			<xul:row anonid="template-row" class="document" hidden="true">
				<xul:label value="" />
				<xul:label value="" />
				<xul:label value="" />
			</xul:row>				
		</content>
	</binding>
</bindings>
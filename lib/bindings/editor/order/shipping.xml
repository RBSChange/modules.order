<?xml version="1.0" encoding="UTF-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl"
	xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="order_shipping" extends="layout.cDocumentEditor#cDocumentEditorPanel">
		<content>
			<xul:vbox flex="1">
		        <xul:cmessageinfo anonid="message"/>
		        <xul:hbox anonid="action-bar">
		        </xul:hbox>
				<xul:scrollbox anonid="scrollctrl" flex="1" class="editordatacontainer" orient="vertical">
					<xul:cfieldsgroup class="customeraddress" label="${transui:m.order.bo.general.shipping-address,ucf,attr}"/>
									
					<xul:cfieldsgroup label="${transui:m.order.document.orderpreparation.documents-name,ucf,attr}" hidegrid="true" 
						xbl:inherits="hidden=hideorderpreparation">
						<xul:cfieldsgroup class="orderpreparations" anonid="orderpreparation-grid" />
					</xul:cfieldsgroup>
					
					<xul:cfieldsgroup label="${transui:m.order.bo.doceditor.expeditions,ucf,attr}" hidegrid="true">
						<xul:cfieldsgroup class="orderexpeditions" anonid="expedition-grid" xbl:inherits="collapsed=collapseexpeditions" />
						<xul:hbox anonid="expedition-message" collapsed="true" align="center">
							<xul:label value="${transui:m.order.document.expedition.generating,ucf,attr}" />
						</xul:hbox>
					</xul:cfieldsgroup>
				</xul:scrollbox>
			</xul:vbox>	
		</content>
		<implementation>
			<field name="mButtons">null</field>
			<field name="mOrderExpeditions">null</field>
			<field name="mOrderPreparations">null</field>
			<field name="mAddress">null</field>				
			<field name="mInitData">null</field>
			
			<constructor><![CDATA[
				var me = this;
				this.mButtons = {};

				this.mButtons.CreateOPButton = this.addActionButton("${transui:m.order.bo.actions.createorderpreparation,ucf,js}", wToolkit.getIcon('add', 'small'));
				this.mButtons.CreateOPButton.addEventListener('command', function(event) {me.onCreateOrderpreparation(event);}, true);
				this.mButtons.CreateOPButton.setAttribute('hidden', 'true');
				
				this.mButtons.GenerateDefaultExpedition = this.addActionButton("${transui:m.order.bo.actions.generate-default-expedition,ucf,js}", wToolkit.getIcon('add', 'small'));
				this.mButtons.GenerateDefaultExpedition.addEventListener('command', function(event) {me.generateDefaultExpedition(event);}, true);
				this.mButtons.GenerateDefaultExpedition.setAttribute('hidden', 'true');
						
				this.mButtons.Finalize = this.addActionButton("${transui:m.order.bo.actions.finalize-order,ucf,js}", wToolkit.getIcon('check', 'small'));
				this.mButtons.Finalize.addEventListener('command', function(event) {me.onFinalizeOrder(event);}, true);
				this.mButtons.Finalize.disabled = true;
													
				this.addEventListener("gridInitialised", function (event) {return me.onGridInitialised(event);}, true);
				this.addEventListener("addressInitialised", function (event) {return me.onAddressInitialised(event);}, true);
				this.addEventListener("generateExpedition", function (event) {return me.onGenerateExpedition(event);}, true);		
			]]></constructor>
			
			<method name="initUI">
				<body><![CDATA[
				if (this.hasAttribute('uiinitiated')) {return;}

				if (this.documentEditor.module.hasAttribute('useOrderPreparation'))
				{
					this.mButtons.CreateOPButton.removeAttribute('hidden');	
				}
				else
				{
					this.setAttribute('hideorderpreparation', 'true');
				}
				
				if (this.documentEditor.module.hasAttribute('generateDefaultExpedition'))
				{
					this.mButtons.GenerateDefaultExpedition.removeAttribute('hidden');		
				}
				
				this.setAttribute('uiinitiated', 'true');
				]]></body>
			</method>
			
			<method name="lockCommandsUI">
				<body><![CDATA[
					for (var n in this.mButtons)
					{
						this.mButtons[n].disabled = true;
					}
				]]></body>
			</method>
				
			<method name="updateCommandsUI">
				<body><![CDATA[
					this.lockCommandsUI();
					if (this.mInitData != null)
					{
						this.mButtons.Finalize.disabled = !this.mInitData.canBeFinalize;
							
						if (('CreateOPButton' in this.mButtons) && ('createOrderPreparation' in this.mInitData))
						{
							this.mButtons.CreateOPButton.disabled = false;
						}
						
						if (('GenerateDefaultExpedition' in this.mButtons) && ('generateDefaultExpedition' in this.mInitData))
						{
							this.mButtons.GenerateDefaultExpedition.disabled = false;
						}
					}
				]]></body>
			</method>
				
			<method name="onFinalizeOrder">
				<parameter name="event" />
				<body><![CDATA[
					this.lockCommandsUI();
					if (confirm("${transui:m.order.bo.actions.finalize-order-confirm-message,ucf}"))
					{
						this.showTextMessage("${transui:m.order.bo.actions.finalize-order-in-progress,ucf}");
						this.documentEditor.executeServerAction('shipping', 'FinalizeOrder');
					}
				]]></body>
			</method>
			
			<method name="getFinalizeOrderParameters">
				<body><![CDATA[
					var attributes = {
						action: 'FinalizeOrder',
						cmpref: this.documentEditor.documentid, 
						lang : this.documentEditor.documentInfos.vo
					};
					return attributes;
				]]></body>
			</method>
			
			<method name="fireFinalizeOrderComplete">
				<parameter name="result" />
				<body><![CDATA[			
					if (result.status == "OK")
					{					
						this.documentEditor.clearTabs();				
						this.fireInitializeComplete(result);
						if ('creditNoteIds' in result.contents && result.contents.creditNoteIds.length)
						{
							this.showWarningMessage("${transui:m.order.bo.actions.order-finalized-with-creditNote,ucf,js}")
						}	
						else
						{					
							this.showTextMessage("${transui:m.order.bo.actions.order-finalized,ucf,js}");
						}
					}
					else
					{
						this.showErrorMessage(result.contents.errorMessage);					
					}
				]]></body>
			</method>
			
			<method name="onCreateOrderpreparation">
				<parameter name="event" />
				<body><![CDATA[
					this.documentEditor.executeModuleAction('createOrderpreparation');
				]]></body>
			</method>
			
			<method name="generateDefaultExpedition">
				<body><![CDATA[
					this.lockCommandsUI();
					this.showTextMessage("${transui:m.order.bo.actions.generating-default-expedition,ucf,js}");
					this.documentEditor.executeServerAction('shipping', 'GenerateDefaultExpedition');
				]]></body>
			</method>
			
			<method name="getGenerateDefaultExpeditionParameters">
				<body><![CDATA[
					return {
						action: 'GenerateDefaultExpedition',
						cmpref: this.documentEditor.documentid, 
						lang : this.documentEditor.documentInfos.vo
					};
				]]></body>
			</method>
												
			<method name="fireGenerateDefaultExpeditionComplete">
				<parameter name="result" />
				<body><![CDATA[
					this.fireInitializeComplete(result);
				]]></body>
			</method>
			
			<method name="onGenerateExpedition">
				<parameter name="event" />
				<body><![CDATA[
					var orderPreparationId = event.orderPreparationId;
					this.lockCommandsUI();
					this.showTextMessage("${transui:m.order.bo.actions.generating-default-expedition,ucf,js}");
					this.setAttribute('orderPreparationId', orderPreparationId);
					this.documentEditor.executeServerAction('shipping', 'GenerateExpedition');
				]]></body>
			</method>	
			
			<method name="getGenerateExpeditionParameters">
				<body><![CDATA[
					return {
						action: 'GenerateExpedition',
						cmpref: this.getAttribute('orderPreparationId'), 
						lang : this.documentEditor.documentInfos.vo
					};
				]]></body>
			</method>
			
			<method name="fireGenerateExpeditionComplete">
				<parameter name="result" />
				<body><![CDATA[
					this.fireInitializeComplete(result);
				]]></body>
			</method>
	
			<method name="onGridInitialised">
				<parameter name="event" />
				<body><![CDATA[	
					var grid = event.originalTarget;
					var idts = this.mInitData;
					
					if (grid.className == 'orderexpeditions')
					{
						this.mOrderExpeditions = grid;
						if (idts && idts.expeditionArray)
						{
							this.mOrderExpeditions.initJSONDataset(idts.expeditionArray);
						}	
						else
						{
							this.mOrderExpeditions.initJSONDataset(null);
						}
					}
					else if (grid.className == 'orderpreparations')
					{
						this.mOrderPreparations = grid;
						if (idts && "orderPreparationArray" in idts && idts.orderPreparationArray)
						{
							this.mOrderPreparations.initJSONDataset(idts.orderPreparationArray);
						}	
						else
						{
							this.mOrderPreparations.initJSONDataset(null);
						}
					}
				]]></body>
			</method>
			
			<method name="onAddressInitialised">
				<parameter name="event" />
				<body><![CDATA[	
					var grid = event.originalTarget;
					if (grid.className == 'customeraddress')
					{
						this.mAddress = grid;
						if (this.mInitData && this.mInitData.address)
						{
							this.mAddress.initJSONDataset(this.mInitData.address);
						}	
						else
						{
							this.mAddress.initJSONDataset(null);
						}
					}	
				]]></body>
			</method>
							
			<method name="getInitializeParameters">
				<body><![CDATA[
					this.initUI();
					return {
						action: 'LoadOrderShipping',
						cmpref: this.documentEditor.documentid, 
						lang : this.documentEditor.documentInfos.vo
					};
				]]></body>
			</method>
												
			<method name="fireInitializeComplete">
				<parameter name="result" />
				<body><![CDATA[					
					if (result.status != 'OK')
					{	
						this.showErrorMessage(result.contents.errorMessage);
						this.collapseContentZone(true);						
						this.mInitialized = true;
						this.mInitData = null;
						this.lockCommandsUI();
						return;
					}
					var idts = result.contents;
					this.mInitData = idts;
					
					if ('orderPreparationArray' in idts)
					{
						if (this.mOrderPreparations)
						{
							this.mOrderPreparations.initJSONDataset(idts.orderPreparationArray);
						}
					}
					
					// Expeditions.
					var nodeMessage = this.getElementByAnonId('expedition-message');
					if ('expeditionArray' in idts && idts.expeditionArray.length > 0)
					{
						this.removeAttribute('collapseexpeditions');
						nodeMessage.setAttribute('collapsed', 'true');
						if (this.mOrderExpeditions)
						{
							this.mOrderExpeditions.initJSONDataset(idts.expeditionArray);
						}
					}	
					else
					{
						this.setAttribute('collapseexpeditions', 'true');
						if (this.mOrderExpeditions)
						{
							this.mOrderExpeditions.initJSONDataset(null);
						}
						if ('showExpeditionMessage' in idts && idts.showExpeditionMessage)
						{
							nodeMessage.removeAttribute('collapsed');
						}
						else
						{
							nodeMessage.setAttribute('collapsed', 'true');
						}
					}
					
					// Address.
					if (this.mAddress)
					{
						this.mAddress.initJSONDataset(idts.address);
					}
					
					this.updateCommandsUI();												
					this.collapseContentZone(false);
					this.mInitialized = true;
					this.fireEvent("panelInitializeComplete");
					this.gotoTop();
				]]></body>
			</method>		
		</implementation>
	</binding>
</bindings>
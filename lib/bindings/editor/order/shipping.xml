<?xml version="1.0" encoding="UTF-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl"
	xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="order_shipping" extends="layout.cDocumentEditor#cDocumentEditorPanel">
		<content>
			<xul:vbox flex="1">
		        <xul:cmessageinfo anonid="message"/>
		        <xul:hbox anonid="action-bar">
		          <!-- <xul:button anonid="save_properties" oncommand="saveProperties()" label="Enregistrer" image="http://web35.localhost/changeicons/small/save.png"/> -->
		        </xul:hbox>
				<xul:scrollbox anonid="scrollctrl" flex="1" class="editordatacontainer" orient="vertical">
					<xul:cfieldsgroup class="customeraddress" label="${transui:m.order.bo.general.shipping-address,ucf,attr}"/>
					
					<xul:cfieldsgroup label="${transui:m.order.bo.doceditor.expeditions,ucf,attr}">
						<xul:cfieldsgroup class="orderexpeditions" />
					</xul:cfieldsgroup>
					
					<xul:cfieldsgroup anonid="orderreturns" label="${transui:m.order.bo.doceditor.returns,ucf,attr}">
						<xul:cfieldsgroup class="orderreturns" />
					</xul:cfieldsgroup>
				</xul:scrollbox>
			</xul:vbox>	
		</content>
		<implementation>
			<field name="mOrderExpeditions">null</field>
			<field name="mOrderReturns">null</field>
			<field name="mAddress">null</field>				
			<field name="mInitData">null</field>
			
			<constructor><![CDATA[
				if (getController().hasModule('productreturns'))
				{
					this.mCreateReturnButton = this.addActionButton("${transui:m.productreturns.bo.actions.createreturn,ucf,js}", wToolkit.getIcon('add', 'small'));
					this.mCreateReturnButton.addEventListener('command', function(event) {me.onCreateReturn(event);}, true);
				}
				var me = this;			
				this.addEventListener("gridInitialised", function (event) {return me.onGridInitialised(event);}, true);
				this.addEventListener("addressInitialised", function (event) {return me.onAddressInitialised(event);}, true);		
			]]></constructor>
	
			<method name="onCreateReturn">
				<parameter name="event" />
				<body><![CDATA[
				var id = this.documentEditor.documentid;	
				var uri = ['productreturns', 'createReturnForOrder', 'modules_productreturns_return', id].join(',');
				var from = ['order', 'openDocument', 'modules_order_order', id, 'shipping'].join(',');
				openActionUri(uri, from);
				]]></body>
			</method>
	
			<method name="onGridInitialised">
				<parameter name="event" />
				<body><![CDATA[	
					var grid = event.originalTarget;
					if (grid.className == 'orderexpeditions')
					{
						this.mOrderExpeditions = grid;
						if (this.mInitData && this.mInitData.expeditionArray)
						{
							this.mOrderExpeditions.initJSONDataset(this.mInitData.expeditionArray);
						}	
						else
						{
							this.mOrderExpeditions.initJSONDataset(null);
						}
					}
					else if (grid.className == 'orderreturns')
					{
						this.mOrderReturns = grid;
						if (this.mInitData && "returnsArray" in this.mInitData && this.mInitData.returnArray)
						{
							this.mOrderReturns.initJSONDataset(this.mInitData.returnsArray);
						}	
						else
						{
							this.mOrderReturns.initJSONDataset(null);
						}
					}	
				]]></body>
			</method>
			
			<method name="onAddressInitialised">
				<parameter name="event" />
				<body><![CDATA[	
					var grid = event.originalTarget;
					wCore.debug('onAddressInitialised :' + grid.className);
					if (grid.className == 'customeraddress')
					{
						this.mAddress = grid;
						if (this.mInitData && this.mInitData.address)
						{
							this.mAddress.initJSONDataset(this.mInitData.address);
						}	
						else
						{
							this.mAddress.initJSONDataset(null);
						}
					}	
				]]></body>
			</method>
					
			<method name="getInitializeParameters">
				<body><![CDATA[
					return {
						action: 'LoadOrderShipping',
						cmpref: this.documentEditor.documentid, 
						lang : this.documentEditor.documentInfos.vo
					};
				]]></body>
			</method>
												
			<method name="fireInitializeComplete">
				<parameter name="result" />
				<body><![CDATA[					
					if (result.status != 'OK')
					{	
						this.showErrorMessage(result.contents.errorMessage);
						this.collapseContentZone(true);						
						this.mInitialized = true;
						return;
					}
					
					this.mInitData = result.contents;
					if (this.mOrderExpeditions)
					{
						this.mOrderExpeditions.initJSONDataset(this.mInitData.expeditionArray);
					}
					if ("returnsArray" in this.mInitData)
					{
						if (this.mOrderReturns)
						{
							this.mOrderReturns.initJSONDataset(this.mInitData.returnsArray);
						}
					}
					else
					{
						this.getElementByAnonId('orderreturns').setAttribute('hidden', 'true');
					}
					if (this.mAddress)
					{
						this.mAddress.initJSONDataset(this.mInitData.address);
					}														
					this.collapseContentZone(false);
					this.mInitialized = true;
					this.fireEvent("panelInitializeComplete");
					this.gotoTop();
				]]></body>
			</method>		
		</implementation>
	</binding>
</bindings>
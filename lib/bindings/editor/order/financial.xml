<?xml version="1.0" encoding="UTF-8"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl"
	xmlns:html="http://www.w3.org/1999/xhtml"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="order_financial" extends="layout.cDocumentEditor#cDocumentEditorPanel">
		<content>
			<xul:vbox flex="1">
		        <xul:cmessageinfo anonid="message"/>
		        <xul:hbox anonid="action-bar">
		        </xul:hbox>
				<xul:scrollbox anonid="scrollctrl" flex="1" class="editordatacontainer" orient="vertical">
					<xul:cfieldsgroup class="customeraddress" label="${transui:m.order.bo.general.billing-address,ucf,attr}"/>
					
					<xul:cfieldsgroup label="${transui:m.order.bo.doceditor.bills,ucf,attr}">
						<xul:cfieldsgroup class="orderbills" />
					</xul:cfieldsgroup>
					
					<xul:cfieldsgroup label="${transui:m.order.bo.doceditor.creditnotes,ucf,attr}">
						<xul:cfieldsgroup class="ordercreditnotes" />
					</xul:cfieldsgroup>
				</xul:scrollbox>
			</xul:vbox>	
		</content>
		<implementation>
			<field name="mButtons">null</field>			
			<field name="mOrderBills">null</field>
			<field name="mOrderCreditNotes">null</field>
			<field name="mAddress">null</field>				
			<field name="mInitData">null</field>
			
			<constructor><![CDATA[
				var me = this;
				this.mButtons = {};
				
				this.mButtons.CreateCreditNoteButton = this.addActionButton("${transui:m.order.bo.actions.createcreditnote,ucf,js}", wToolkit.getIcon('add', 'small'));
				this.mButtons.CreateCreditNoteButton.addEventListener('command', function(event) {me.onCreateCreditNote(event);}, true);
				this.mButtons.CreateCreditNoteButton.disabled = true;
				
				this.mButtons.CancelOrderButton = this.addActionButton("${transui:m.order.bo.actions.cancel-order,ucf,js}", wToolkit.getIcon('reject', 'small'));
				this.mButtons.CancelOrderButton.addEventListener('command', function(event) { me.onCancelOrder(); }, true);
				this.mButtons.CancelOrderButton.disabled = true;				
		
				this.addEventListener("gridInitialised", function (event) {return me.onGridInitialised(event);}, true);
				this.addEventListener("addressInitialised", function (event) {return me.onAddressInitialised(event);}, true);		
			]]></constructor>
			
			
			<method name="lockCommandsUI">
				<body><![CDATA[
					for (var n in this.mButtons)
					{
						this.mButtons[n].disabled = true;
					}
				]]></body>
			</method>	
			
			<method name="updateCommandsUI">
				<body><![CDATA[
					this.lockCommandsUI();
					if (this.mInitData != null)
					{
						this.mButtons.CancelOrderButton.disabled = !this.mInitData.canBeCanceled;
						this.mButtons.CreateCreditNoteButton.disabled = false;
					}
				]]></body>
			</method>
					
			<method name="onCancelOrder">
				<parameter name="event" />
				<body><![CDATA[
					this.lockCommandsUI();
					if (confirm("${transui:m.order.bo.doceditor.confirm-cancelation,ucf}"))
					{
						this.showTextMessage("${transui:m.order.bo.doceditor.cancelation-in-progress,ucf}");
						this.documentEditor.executeServerAction('financial', 'CancelOrder');
					}
				]]></body>
			</method>
			
			<method name="getCancelOrderParameters">
				<body><![CDATA[
					var attributes = {
						action: 'CancelOrderJSON',
						cmpref: this.documentEditor.documentid, 
						lang : this.documentEditor.documentInfos.vo
					};
					return attributes;
				]]></body>
			</method>
			
			<method name="fireCancelOrderComplete">
				<parameter name="result" />
				<body><![CDATA[			
					if (result.status == "OK")
					{					
						this.documentEditor.clearTabs();				
						this.fireInitializeComplete(result);						
						this.showTextMessage("${transui:m.order.bo.doceditor.message.order-canceled,ucf,js}");
					}
					else
					{
						this.showErrorMessage(result.contents.errorMessage);					
					}
				]]></body>
			</method>
			
			<method name="onCreateCreditNote">
				<parameter name="event" />
				<body><![CDATA[
				var id = this.documentEditor.documentid;	
				var uri = ['order', 'createCreditNoteForOrder', 'modules_order_creditnote', id].join(',');
				var from = ['order', 'openDocument', 'modules_order_order', id, 'financial'].join(',');
				openActionUri(uri, from);
				]]></body>
			</method>
						
			<method name="onGridInitialised">
				<parameter name="event" />
				<body><![CDATA[	
					var grid = event.originalTarget;
					if (grid.className == 'orderbills')
					{
						this.mOrderBills = grid;
						if (this.mInitData && this.mInitData.billArray)
						{
							this.mOrderBills.initJSONDataset(this.mInitData.billArray);
						}	
						else
						{
							this.mOrderBills.initJSONDataset(null);
						}
					}	
					else if (grid.className == 'ordercreditnotes')
					{
						this.mOrderCreditNotes = grid;
						if (this.mInitData && this.mInitData.creditnoteArray)
						{
							this.mOrderCreditNotes.initJSONDataset(this.mInitData.creditnoteArray);
						}	
						else
						{
							this.mOrderCreditNotes.initJSONDataset(null);
						} 
					}
				]]></body>
			</method>

			<method name="onAddressInitialised">
				<parameter name="event" />
				<body><![CDATA[	
					var grid = event.originalTarget;
					if (grid.className == 'customeraddress')
					{
						this.mAddress = grid;
						if (this.mInitData && this.mInitData.address)
						{
							this.mAddress.initJSONDataset(this.mInitData.address);
						}	
						else
						{
							this.mAddress.initJSONDataset(null);
						}
					}	
				]]></body>
			</method>	
					
			<method name="getInitializeParameters">
				<body><![CDATA[
					return {
						action: 'LoadOrderFinancial',
						cmpref: this.documentEditor.documentid, 
						lang : this.documentEditor.documentInfos.vo
					};
				]]></body>
			</method>
												
			<method name="fireInitializeComplete">
				<parameter name="result" />
				<body><![CDATA[					
					if (result.status != 'OK')
					{	
						this.lockCommandsUI();
						this.showErrorMessage(result.contents.errorMessage);
						this.collapseContentZone(true);						
						this.mInitialized = true;
						return;
					}
					
					this.mInitData = result.contents;
					if (this.mOrderBills)
					{
						this.mOrderBills.initJSONDataset(this.mInitData.billArray);
					}
					if (this.mOrderCreditNotes)
					{
						this.mOrderCreditNotes.initJSONDataset(this.mInitData.creditnoteArray);
					}
					if (this.mAddress)
					{
						this.mAddress.initJSONDataset(this.mInitData.address);
					}	
					
								
					this.updateCommandsUI();
					this.collapseContentZone(false);
					this.mInitialized = true;
					this.fireEvent("panelInitializeComplete");
					this.gotoTop();
				]]></body>
			</method>
		
		</implementation>
	</binding>
</bindings>
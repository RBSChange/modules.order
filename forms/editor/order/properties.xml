<?xml version="1.0" encoding="UTF-8"?>
<panel>
	<section labeli18n="modules.order.bo.general.Order-informations">
		<sectionrow labeli18n="modules.order.bo.general.Website" id="website" />
		<sectionrow labeli18n="modules.order.bo.general.Reference" id="reference" />
		<sectionrow labeli18n="modules.order.bo.general.Date" id="creationdate" />
		<section class="customer" />
		<field name="commentadmin" type="longtext" />	
	</section>	
	
	<section labeli18n="modules.order.bo.general.Order-details" >
		<section class="orderlines"/>
	</section>
	
	<section labeli18n="modules.order.bo.general.Coupon" class="couponSection">
		<sectionrow labeli18n="modules.order.bo.general.Coupon-name" id="couponSectionName" />
		<sectionrow labeli18n="modules.order.bo.general.Coupon-code" id="couponSectionCode" />
	</section>
		
	<section labeli18n="modules.order.bo.doceditor.section.Discounts" class="discountsSection">
		<section class="discountlines" />
	</section>
	
	<section labeli18n="modules.order.bo.general.Amount">
		<sectionrow labeli18n="modules.order.bo.general.Sub-total" id="subTotal" />
		<sectionrow labeli18n="modules.order.frontoffice.Coupon-name" id="couponName" />
		<sectionrow labeli18n="modules.order.frontoffice.Discount-name" id="discountTotal" />
		<sectionrow labeli18n="modules.order.bo.general.Shipping-fees" id="shippingFees" />
		<sectionrow labeli18n="modules.order.bo.general.Billing-mode" id="billingMode" />
		<sectionrow labeli18n="modules.order.bo.general.Billing-fees" id="billingFees" />
		<sectionrow labeli18n="modules.order.bo.doceditor.panel.carts.Tva-amounts" id="tvaAmounts" />
		<sectionrow labeli18n="modules.order.bo.doceditor.property.Used-credit-note" id="usedCreditNote" />
		<sectionrow labeli18n="modules.order.bo.general.Total-to-pay" id="totalAmount" />
	</section>

	<xul>
		<javascript>
			<constructor><![CDATA[
				// Cancel order button.
				this.mCancelOrderButton = this.addActionButton("${transui:m.order.bo.actions.cancel-order,ucf,js}", "{IconsBase}/small/reject.png");
				var me = this;
				this.mCancelOrderButton.addEventListener('command', function(event) { me.onCancelOrder(); }, true);			
				this.extendMethod("updateCommandsUI", this.updateCancelOrderUI);
				this.extendMethod("fireInitializeComplete", this.initializeExtra);				
				this.addEventListener("gridInitialised", function (event) { return me.onGridInitialised(event); }, true);
				
				// Print order button.
				var button = this.addActionButton("${transui:m.order.bo.actions.view-printable-version,ucf,js}", "{IconsBase}/small/printer.png");
				button.addEventListener('command', function () { me.printOrder(); }, true);
			]]></constructor>
			
			<field name="mPropIds">["website", "reference", "creationdate",
				"subTotal", "couponName", "shippingFees", "billingMode", "billingFees",
				"tvaAmounts", "discountTotal", "usedCreditNote", "totalAmount",
				"couponSectionName", "couponSectionCode"]</field>
			
			<field name="mCancelOrderButton">null</field>
			<field name="mCanBeCanceled">false</field>
			
			<field name="mOrderlines">null</field>
			<field name="mDiscountLines">null</field>
			
			<field name="mInitData">null</field>

			<method name="updateCancelOrderUI">
				<parameter name="event" />
				<body><![CDATA[
					this.mCancelOrderButton.disabled = (this.modified || !this.mCanBeCanceled);
				]]></body>
			</method>

			<method name="onCancelOrder">
				<parameter name="event" />
				<body><![CDATA[
					this.lockCommandsUI();
					if (confirm("${transui:m.order.bo.doceditor.confirm-cancelation,ucf}"))
					{
						this.showTextMessage("${transui:m.order.bo.doceditor.cancelation-in-progress,ucf}");
						this.documentEditor.executeServerAction('properties', 'CancelOrder');
					}
				]]></body>
			</method>
			
			<method name="getCancelOrderParameters">
				<body><![CDATA[
					var documentInfos = this.documentEditor.documentInfos;
					var attributes = {
						action: 'CancelOrderJSON',
						cmpref: this.mDocumentId, 
						lang : this.mLang,
						documentversion: this.mRevision,
						documentproperties: this.mFieldNames.join(',')
					};
					return attributes;
				]]></body>
			</method>
			
			<method name="fireCancelOrderComplete">
				<parameter name="result" />
				<body><![CDATA[			
					if (result.status == "OK")
					{
						this.modified = false;						
						this.documentEditor.clearTabs();
						//wCore.debug('fireCancelOrderComplete' + wCore.dump(result));						
						this.fireInitializeComplete(result);						
						this.showTextMessage("&modules.order.bo.doceditor.message.Order-canceled;");
					}
					else
					{
						this.showErrorMessage(result.contents.errorMessage);					
					}
				]]></body>
			</method>
				
			<method name="onGridInitialised">
				<parameter name="event" />
				<body><![CDATA[	
					var grid = event.originalTarget;
					if (grid.className == 'orderlines')
					{
						this.mOrderlines = grid;
						if (this.mInitData && this.mInitData.lines)
						{
							this.mOrderlines.initJSONDataset(this.mInitData.lines);
						}	
						else
						{
							this.mOrderlines.initJSONDataset(null);
						}
					}
					else if (grid.className == 'discountlines')
					{
						this.mDiscountLines = grid;
						if (this.mInitData && this.mInitData.discountDataArray)
						{
							this.mDiscountLines.initJSONDataset(this.mInitData.discountDataArray);
						}	
						else
						{
							this.mDiscountLines.initJSONDataset(null);
						}
					}		
				]]></body>
			</method>
						
			<method name="initializeExtra">
				<parameter name="result" />
				<body><![CDATA[	
					if (result.status != 'OK')
					{
						this.mInitData = null;
						return;
					}
					
					this.mInitData = result.contents;					
					var informations = this.mInitData.informations;
					this.mCanBeCanceled = informations['canBeCanceled'];
					wCore.debug ('initializeExtra mCanBeCanceled ' + this.mCanBeCanceled);
					this.updateCancelOrderUI();
					
					for each (var name in this.mPropIds)
					{
						var node = document.getAnonymousElementByAttribute(this, "anonid", name);
						if (informations[name])
						{
							node.setAttribute('value', informations[name]);
							node.parentNode.removeAttribute('collapsed');
						}
						else
						{
							node.parentNode.setAttribute('collapsed', 'true');
						}
					}
					
					var customerSection = document.getAnonymousElementByAttribute(this, 'class', 'customer');
					customerSection.setAttribute('customerId', informations['customerId']);
					customerSection.setAttribute('email', informations['email']);
					
					if (!informations['couponName'])
					{
						document.getAnonymousElementByAttribute(this, 'class', 'couponSection').setAttribute('collapsed', 'true');
					}
					else
					{
						document.getAnonymousElementByAttribute(this, 'class', 'couponSection').removeAttribute('collapsed');
					}
					
					// Lines handling.
					if (this.mOrderlines)
					{
						this.mOrderlines.initJSONDataset(this.mInitData.lines);
					}
					
					if (this.mDiscountLines)
					{
						this.mDiscountLines.initJSONDataset(this.mInitData.discountDataArray);
					}
					
					if (this.mInitData.discountDataArray.length == 0)
					{
						document.getAnonymousElementByAttribute(this, 'class', 'discountsSection').setAttribute('collapsed', 'true');
					}
					else
					{
						document.getAnonymousElementByAttribute(this, 'class', 'discountsSection').removeAttribute('collapsed');
					}	
				]]></body>
			</method>
			
			<method name="printOrder">
				<body><![CDATA[	
					var url = wCore.buildServerUrl('order', 'PrintOrder', { mode: 'Properties', cmpref: this.documentEditor.documentid, lang: this.documentEditor.vo });												
					wToolkit.openurl(url);
				]]></body>
			</method>
		</javascript>
	</xul>
</panel>